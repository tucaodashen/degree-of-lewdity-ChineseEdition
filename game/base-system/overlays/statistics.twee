:: Statistics [widget]
<<widget "statistics">>

<<foldout false "_virginitiesFoldout">>
	<span class="gold">Virginities</span>
	<<if $player.vaginaExist>>
		Vaginal virginity: <<print ($player.virginity.vaginal is true ? "Present" : "Taken by " + ($player.virginity.vaginal is false ? "unknown" : $player.virginity.vaginal))>>
		<br>
	<</if>>
	<<if $player.penisExist>>
		Penile virginity: <<print ($player.virginity.penile is true ? "Present" : "Taken by " + ($player.virginity.penile is false ? "unknown" : $player.virginity.penile))>>
		<br>
	<</if>>

	Anal virginity: <<print ($player.virginity.anal is true ? "Present" : "Taken by " + ($player.virginity.anal is false ? "unknown" : $player.virginity.anal))>>
	<br>
	Oral virginity: <<print ($player.virginity.oral is true ? "Present" : "Taken by " + ($player.virginity.oral is false ? "unknown" : $player.virginity.oral))>>
	<br>
	Handholding virginity: <<print ($player.virginity.handholding is true ? "Present" : "Taken by " + ($player.virginity.handholding is false ? "unknown" : $player.virginity.handholding))>>
	<br>
	First kiss: <<print ($player.virginity.kiss is true ? "Present" : "Taken by " + ($player.virginity.kiss is false ? "unknown" : $player.virginity.kiss))>>
	<br><br>
<</foldout>>

<<foldout false "_virginitiesTakenFoldout">>
	<span class="gold">Virginities taken</span>
	<!-- For the total virginities taken, iterate over every virginity type and sum up the number of entries belonging to each. -->
	<<set _total to 0>>
	<<run Object.values($virginTaken).forEach(type => _total += type.length)>>
	Total: _total
	<br>

	<!-- For each individual virginity type, the number is named and unnamed combined, but the list of names has unnamed npcs filtered out. -->
	<<set _vaginalNamed to $virginTaken.vaginal.filter(name => $NPCNameList.indexOf(name) isnot -1)>>
	<<set _penileNamed to $virginTaken.penile.filter(name => $NPCNameList.indexOf(name) isnot -1)>>
	<<set _analNamed to $virginTaken.anal.filter(name => $NPCNameList.indexOf(name) isnot -1)>>
	<<set _oralNamed to $virginTaken.oral.filter(name => $NPCNameList.indexOf(name) isnot -1)>>
	<<set _handholdingNamed to $virginTaken.handholding.filter(name => $NPCNameList.indexOf(name) isnot -1)>>
	<<set _kissNamed to $virginTaken.kiss.filter(name => $NPCNameList.indexOf(name) isnot -1)>>

	Vaginal: $virginTaken.vaginal.length<<print (_vaginalNamed.length gte 1 ? ", including: " + _vaginalNamed.join(', ') : "")>>
	<br>
	Penile: $virginTaken.penile.length<<print (_penileNamed.length gte 1 ? ", including: " + _penileNamed.join(', ') : "")>>
	<br>
	Anal: $virginTaken.anal.length<<print (_analNamed.length gte 1 ? ", including: " + _analNamed.join(', ') : "")>>
	<br>
	Oral: $virginTaken.oral.length<<print (_oralNamed.length gte 1 ? ", including: " + _oralNamed.join(', ') : "")>>
	<br>
	First hands held: $virginTaken.handholding.length<<print (_handholdingNamed.length gte 1 ? ", including: " + _handholdingNamed.join(', ') : "")>>
	<br>
	First kisses: $virginTaken.kiss.length<<print (_kissNamed.length gte 1 ? ", including: " + _kissNamed.join(', ') : "")>>
	<br><br>
<</foldout>>

<<foldout false "_jobsFoldout">>
	<span class="gold">Jobs</span>
	Danced: $dancestat
	<br>
	Drinks served: $drinksservedstat
	<br>
	Tables served: $tablesservedstat
	<br>
	Whored yourself: $prostitutionstat
	<br>
	<<if $gamemode isnot "soft">>
	Forcibly whored out: $forcedprostitutionstat
	<br>
	<</if>>
	Hours worked on the docks: $dockhours
	<br>
	Buns sold at the cafe: $bunstat
	<br>
	Most "cream" produced: <<print parseFloat($creamstat.toFixed(1))>> mL
	<br>
	Smugglers intercepted: $smuggler_stolen_stat
	<br>
	Tasks performed at the pub: $pub_task_stat
	<br>
	Produce sold: $produce_sold
	<br>
	<<if $farmersProduce>>
		Produce sold in bulk: $farmersProduce.totalSold
		<br>
	<</if>>
	Fertiliser Used: $fertiliser.used
	<br>
	Hours worked on a farm: <<print Math.trunc($farm_shift / 60)>>
	<br>
	Cattle milked: $cattle_milked
	<br>
	Clients serviced as a masseur: $masseur_stat
	<br>
	Wild plants picked: $wild_plant_stat
	<br>
	Aphrodisiacs sold: $stat_aphrodisiacs_sold
	<br><br>
<</foldout>>

<<foldout false "_sexFoldout">>
	<span class="gold">Sex</span>
	Number of orgasms you've experienced: $orgasmstat
	<br>
	<<if $asphyxiaLvl gte 2>>
		Orgasms while being choked: $chokeorgasm
		<br>
	<</if>>
	<<if $player.penisExist or $toydildodisable is "f">>
		Penetrated others: $penilestat
		<br>
	<</if>>
	<<if $player.penisExist>>
		Ejaculated in others: $penileejacstat
		<br>
	<</if>>
	<<if $player.vaginaExist>>
		Vaginally penetrated: $vaginalstat
		<br>
		Ejaculated in vaginally: $vaginalejacstat
		<br>
	<</if>>
	<<if $analdisable is "f">>
		Anally penetrated: $analstat
		<br>
		Ejaculated in anally: $analejacstat
		<br>
	<</if>>
	Orally penetrated: $oralstat
	<br>
	Ejaculated in orally: $oralejacstat
	<br>
	Semen swallowed: $semenswallowedstat mL
	<<if $bestialitydisable is "f">>
		<br>
		Animal semen swallowed: $animalsemenswallowedstat mL
		<</if>>
	<br>
	Handjobs given: $handstat
	<br>
	Handjob ejaculations: $handejacstat
	<br>
	<<if $footdisable is "f">>
		Footjobs given: $feetstat
		<br>
		Footjob ejaculations: $feetejacstat
		<br>
	<</if>>
	Thighjobs given: $thighstat
	<br>
	Thighjob ejaculations: $thighejacstat
	<br>
	Chestjobs given: $cheststat
	<br>
	Chestjob ejaculations: $chestejacstat
	<br>
	Buttjobs given: $bottomstat
	<br>
	Buttjob ejaculations: $bottomejacstat
	<br>
	Hair ejaculated on: $hairejacstat
	<br>
	Tummy ejaculated on: $tummyejacstat
	<br>
	Neck ejaculated on: $neckejacstat
	<br>
	<<if $player.vaginaExist>>
		Pussy ejaculated on: $vaginalentranceejacstat
		<br>
	<</if>>
	Face ejaculated on: $faceejacstat
	<br>
	Total times you've been ejaculated on or in: $ejacstat
	<br>
	Gloryholes serviced: $gloryholestat
	<br>
	Masturbated: $masturbationstat
	<br>
	Masturbated to orgasm: $masturbationorgasmstat
	<br>
	Minutes spent masturbating: $masturbationtimestat
	<br>
	<<if $breastfeedingdisable is "f">>
		Breast milk drank: $milk_drank_stat mL
		<br>
		Breast milk produced: $milk_produced_stat mL
		<br>
	<</if>>
	<<if $plantdisable is "f">>
		Nectar drank: $nectar_drank_stat mL
		<br>
	<</if>>
	<<if $player.penisExist>>
		Semen produced: <<print Math.floor($semen_produced_stat)>> mL
		<br>
	<</if>>
	<<if $player.vaginaExist>>
		Lewd fluid produced: <<print Math.floor($lube_produced_stat)>> mL
		<br>
	<</if>>
	<<if $player.penisExist or $breastfeedingdisable is "f">>
		Fluid forcibly milked: $fluid_forced_stat mL
		<br>
	<</if>>
	<<if $knot_stat isnot undefined>>
		Knotted: $knot_stat
		<br>
	<</if>>
	<<if $sextoystat isnot undefined>>
		Sex toys used on others: $sextoystat
	<</if>>
	<br>
	<<if $analdoubledisable is "f" and $analdoublestat isnot undefined>>
		Double anally penetrated: $analdoublestat
		<br>
	<</if>>
	<<if $vaginaldoubledisable is "f" and $vaginaldoublestat isnot undefined>>
		Double vaginally penetrated: $vaginaldoublestat
		<br>
	<</if>>
	<<if $watersportsdisable is "f">>
		Urinated on: $urinestat
		<br>
	<</if>>
	<br>
<</foldout>>

<<if $gamemode isnot "soft">>
	<<foldout false "_violenceFoldout">>
		<span class="gold">Violence</span>
		Molested: $moleststat
		<br>
		Raped: $rapestat
		<br>
		<<if $bestialitydisable is "f">>
			Raped by animals: $beastrapestat
			<br>
		<<else>>
			Raped by monster people: $beastrapestat
			<br>
		<</if>>
		<<if $tentacledisable is "f">>
			Raped by tentacle monsters: $tentaclerapestat
			<br>
		<</if>>
		<<if $voredisable is "f">>
			Swallowed: $swallowedstat
			<br>
		<</if>>
		<<if $parasitedisable is "f">>
			Parasites hosted: $parasitestat
			<br>
		<</if>>
		Been hit: $hitstat
		<br>
		Hit others: $attackstat
		<br>
		Pepper spray used: $spraystat
		<br>
		<<if $NPCName[$NPCNameList.indexOf("Eden")].init>>
			Practise shots fired with Eden: $stat_shoot
			<br>
		<</if>>
		Machines disabled: $machine_stat
		<br>
		<<if $lurkerdisable is "f">>
			Lurkers captured: $stat_lurkers_captured
			<br><br>
		<</if>>
	<</foldout>>
<</if>>

<<foldout false "_datesFoldout">>
	<span class="gold">Dates</span>
	<<if $dateCount.Total lte 0>>
		You haven't gone on any dates!<br>
	<<else>>
		Total Dates: $dateCount.Total
		<br>
		<<if $dateCount.Robin gte 1>>
			Dates with Robin: $dateCount.Robin
			<br>
		<</if>>
		<<if $dateCount.Whitney gte 1>>
			Dates with Whitney: $dateCount.Whitney
			<br>
		<</if>>
		<<if $dateCount.Kylar gte 1>>
			Dates with Kylar: $dateCount.Kylar
			<br>
		<</if>>
		<<if $dateCount.Eden gte 1>>
			Dates with Eden: $dateCount.Eden
			<br>
		<</if>>
		<<if $dateCount.Avery gte 1>>
			Dates with Avery: $dateCount.Avery
			<br>
		<</if>>
		<<if $dateCount.BlackWolfHunts gte 1>>
			Hunts with the Black Wolf: $dateCount.BlackWolfHunts
			<br>
		<</if>>
		<<if $dateCount.GreatHawkHunts gte 1>>
			Hunts with the Great Hawk: $dateCount.GreatHawkHunts
			<br>
		<</if>>
		<<if $dateCount.Alex gte 1>>
			Dates with Alex: $dateCount.Alex
			<br>
		<</if>>
		<<if $dateCount.Sydney gte 1>>
			Dates with Sydney: $dateCount.Sydney
			<br>
		<</if>>
	<</if>>
	<br>
<</foldout>>

/*ToDo: Pregnancy, remove check to properly enable*/
<<if $pregnancyTesting>>
	<<foldout false "_pregnancyFoldout">>
		<span class="gold">Pregnancy</span>
		<<if $player.vaginaExist>>
			Times given birth: <<print $sexStats.vagina.pregnancy.totalBirthEvents>>
			<br>
			Total number of children: <<print $pregnancyStats.playerChildren>>
			<br>
			Total number of human children: <<print $pregnancyStats.humanChildren>>
			<br>
			Total number of wolf children: <<print $pregnancyStats.wolfChildren>>
			<br>
			After Morning pills taken: <<print $pregnancyStats.aftermorningpills>>
			<br>
		<</if>>
		<<if $player.vaginaExist or $pregnancyStats.pregnancyTestsTaken gt 0>>
			Pregnancy tests taken: <<print $pregnancyStats.pregnancyTestsTaken>>
		<</if>>
		<br>
		Anal Pregnancy Births: <<print $sexStats.anus.pregnancy.givenBirth>>
		<br><br>
	<</foldout>>
<</if>>

<<foldout false "_gamblingFoldout">>
	<span class="gold">Gambling</span>
	Games of blackjack played: $estatePersistent.totalGamesPlayed
	<br>
	Games of blackjack played with betting: $estatePersistent.totalGamesPlayedWithBetting
	<br>
	Rounds of blackjack won/lost/tied: $estatePersistent.totalRoundsWon/$estatePersistent.totalRoundsLost/$estatePersistent.totalRoundsTied
	<br>
	Rounds of blackjack won/lost/tied (with bets): $estatePersistent.totalBetRoundsWon/$estatePersistent.totalBetRoundsLost/$estatePersistent.totalBetRoundsTied
	<br>
	Money won in blackjack: <<formatmoney $estatePersistent.totalBetMoneyMade>>_printmoney
	<br>
	Money lost in blackjack: <<formatmoney $estatePersistent.totalBetMoneyLost>>_printmoney
	<br>
	Money confiscated in blackjack: <<formatmoney $estatePersistent.totalMoneyConfiscated>>_printmoney
	<br>
	Tips received in blackjack: <<formatmoney $estatePersistent.totalTipMoneyMade>>_printmoney
	<br>
	Times caught cheating: $estatePersistent.totalCaughtCheating
	<br>
	Highest blackjack streak: $estatePersistent.winStreakHighScore
	<<if $blackjack_played gt 0 or $blackjack_won gt 0>>
		<br>
		Rounds of old blackjack played/won: $blackjack_played/$blackjack_won
	<</if>>
	<<if $blackjack_streak_high and $blackjack_streak_high gt 0>>
		<br>
		Highest old blackjack streak: $blackjack_streak_high
	<</if>>
	<br><br>
<</foldout>>

<<foldout false "_miscFoldout">>
	<span class="gold">Miscellaneous</span>
	<<if $gamemode isnot "soft">>
		Rescued: $rescued
		<br>
	<</if>>
	Clothing stripped: $clothesstripstat
	<br>
	Clothing ruined: $clothesruinstat
	<br>
	Passed out: $passoutstat
	<br>
	/*ToDo: Pregnancy, remove the duplicate stat*/
	<<if $analpregdisable is "f">>
		Anal Pregnancy Births: <<print $sexStats.anus.pregnancy.givenBirth>>
		<br>
	<</if>>
	Crime History: $crimehistory
	<br>
	Distinctions won: $distinction_stat
	<br>
	Hours slept: $sleepStat
	<br>
	Underwear stolen: $stat_panties_stolen
	<br>
	Sentenced with community service: $stat_police.community
	<br>
	Sentenced with the pillory:	$stat_police.pillory
	<br>
	Days in prison: $stat_police.prison
	<br>
	Hypnotised: $hypnotised
	<<if $wraith.possessCount>>
		<br>
		Possessed: $wraith.possessCount
	<</if>>
	<br><br>
<</foldout>>


<<foldout false "_saveFoldout">>
	<span class="gold">Save Game Details</span>
	<<if $passageCount>>
		Total Passages Count: $passageCount
		<mouse class="tooltip linkBlue">(?)<span>Total number of times a new passage has been loaded (Clicking on links in most cases). Passages such as the settings are excluded. Not tracked in versions '0.3.12.X' and older</span></mouse>
		<br>
		Total Passage Changes Count: $passageChangesCount
		<mouse class="tooltip linkBlue">(?)<span>Total number of times a new passage has changed (Clicking on links in most cases). Passages such as the settings are excluded. Not tracked in versions '0.3.12.X' and older</span></mouse>
		<br>
	<</if>>
	<<if $saveDetails isnot undefined>>
		<br>
		Normal saves count: <<print $saveDetails.slot.count>>
		<br>
		Exported saves count: <<print $saveDetails.exported.count>>
		<br>
		Auto saves count: <<print $saveDetails.auto.count>>
		<br>
		Times Loaded: <<print $saveDetails.loadCount || 0>>
		<mouse class="tooltip linkBlue">(?)<span>Total number of times a save has been loaded, does not track repeated load times of the same save. Not tracked in versions '0.3.12.X' and older</span></mouse>
		<br>
		Play Time: <<print msToTime(($saveDetails.playTime ? $saveDetails.playTime : 0) + (new Date() - ($saveDetails.loadTime ? $saveDetails.loadTime : 0)))>>
		<mouse class="tooltip linkBlue">(?)<span>Formatted into 'h:mm:ss'. Be aware that leaving the game for hours alone, then saving will have it's time tracked, to avoid, save the game before ending play and then load the save when you resume play. Not tracked in versions '0.3.12.X' and older</span></mouse>
		<br>
	<</if>>
	<<if $saveVersions isnot undefined>>
		Versions Played On:
		<br>
		<<for _i to 0; _i lt $saveVersions.length; _i++>>
			<<if _i gt 0>>
				<<if $saveVersions[_i].split(".")[2] is $saveVersions[_i - 1].split(".")[2]>>
					--
				<<else>>
					<br>
				<</if>>
			<</if>>
			$saveVersions[_i]
		<</for>>
		<br>
	<</if>>
	<<if $saveVersion>>
		Save loaded from version: $saveVersion
	<</if>>
<</foldout>>
<</widget>>

<<widget "extraStatisticsWarning">>

<<if $options.skipStatisticsConfirmation is undefined>><<set $options.skipStatisticsConfirmation to false>><</if>>

<h3>Extra Statistics</h3>

<div id="spoilerWarning">
	Are you sure you want to see these? They may contain spoilers!
	<br>
	<<link "Yes">>
		<<replace #customOverlayContent>><<extraStatistics>><</replace>>
	<</link>>
	&nbsp;&nbsp;&nbsp;<<checkbox "$options.skipStatisticsConfirmation" false true autocheck>> Don't Show Again
	<!-- ignore the nbsp's, they're just for formatting -->
</div>
<</widget>>

<<widget "extraStatistics">>

<div id="spoilerWarningConfirmed">
	<<foldout false "_stateFoldout">>
		<span class="gold">State</span>
		Pain: <<print Math.trunc($pain)>>
		<br>
		Arousal: <<print Math.trunc($arousal)>>
		<br>
		Fatigue: <<print Math.trunc($tiredness)>>
		<br>
		Stress: <<print Math.trunc($stress)>>
		<br>
		Trauma: <<print Math.trunc($trauma)>>
		<br>
		Control: <<print Math.trunc($control)>>
		<br>
		Allure: <<print Math.trunc($allure)>>
		<br>
		Alcohol: <<print Math.trunc($drunk)>>
		<br>
		Drugs: <<print Math.trunc($drugged)>>
		<br>
		Hallucinogens: <<print Math.trunc($hallucinogen)>>
		<br><br>
	<</foldout>>

	<<foldout false "_charFoldout">>
		<span class="gold">Characteristics</span>
		Purity: <<print Math.trunc($purity)>>
		<br>
		Beauty: <<print Math.trunc($beauty)>>
		<br>
		Physique: <<print Math.trunc($physique)>>
		<br>
		Willpower: <<print Math.trunc($willpower)>>
		<br>
		Awareness: <<print Math.trunc($awareness)>>
		<br>
		Promiscuity: <<print Math.trunc($promiscuity)>>
		<br>
		Exhibitionism: <<print Math.trunc($exhibitionism)>>
		<br>
		Deviancy: <<print Math.trunc($deviancy)>>
		<br>
		Corruption: <<print Math.trunc($corruption_slime)>>
		<br>
		<<if $temple_rank is "initiate" or $temple_rank is "monk" or $temple_rank is "priest">>
			Grace: <<print Math.trunc($grace)>>
			<br>
		<</if>>
		Submissiveness: <<print Math.trunc($submissive)>>
		<br>
		Masochism: <<print Math.trunc($masochism)>>
		<br>
		Sadism: <<print Math.trunc($sadism)>>
		<br>
		Crossdresser progression:
		<<if $crossdressingTrait isnot undefined>>
			<<print Math.trunc($crossdressingTrait)>> %
		<<else>>
			0
		<</if>>
		<br>
		Lactating: <<print ($lactating is 1 ? "True" : "False")>>
		<br>
		<<if $lactating is 1>>
			Milk amount: <<print Math.trunc($milk_amount)>>
			<br>
			Milk volume: <<print Math.trunc($milk_volume)>>
			<br>
		<</if>>
		<<if $player.penisExist>>
			Semen amount: <<print Math.trunc($semen_amount)>>
			<br>
			Semen volume: <<print Math.trunc($semen_volume)>>
			<br>
		<</if>>
		<br>
	<</foldout>>

	<<foldout false "_clothesFoldout">>
		<span class="gold">Clothes</span>
		<<if $worn.upper.name isnot "naked">>
			Upper wetness: <<print Math.trunc($upperwet)>>
			<br>
			Upper integrity: <<print Math.trunc($worn.upper.integrity)>>
			<br>
		<</if>>
		<<if $worn.lower.name isnot "naked">>
			Lower wetness: <<print Math.trunc($lowerwet)>>
			<br>
			Lower integrity: <<print Math.trunc($worn.lower.integrity)>>
			<br>
		<</if>>
		<<if $worn.under_upper.name isnot "naked">>
			Under Upper wetness: <<print Math.trunc($underupperwet)>>
			<br>
			Under Upper integrity: <<print Math.trunc($worn.under_upper.integrity)>>
			<br>
		<</if>>
		<<if $worn.under_lower.name isnot "naked">>
			Under Lower wetness: <<print Math.trunc($underlowerwet)>>
			<br>
			Under Lower integrity: <<print Math.trunc($worn.under_lower.integrity)>>
			<br>
		<</if>>
		<<if $worn.genitals.name isnot "naked">>
			<<print setup.clothes.genitals[clothesIndex('genitals',$worn.genitals)].name_cap>> integrity: <<print Math.trunc($worn.genitals.integrity)>>
			<br>
		<</if>>
		<br>
	<</foldout>>

	<<foldout false "_socialFoldout">>
		<span class="gold">Social</span>
		School status: <<print Math.trunc($cool)>>
		<br>
		Delinquency: <<print Math.trunc($delinquency)>>
		<br>
		Detention: <<print Math.trunc($detention)>>
		<br>
		Crime: <<print Math.trunc($crime)>>
		<br>
		Orphanage hope: <<print Math.trunc($orphan_hope)>>
		<br>
		Orphanage rebelliousness: <<print Math.trunc($orphan_reb)>>
		<br>
		<<if $dockwork is 2>>
			Docks status: <<print Math.trunc($dockstatus)>>
			<br>
		<</if>>
		Sex fame: <<print Math.trunc($fame.sex)>>
		<br>
		Prostitution fame: <<print Math.trunc($fame.prostitution)>>
		<br>
		Rape fame: <<print Math.trunc($fame.rape)>>
		<br>
		Bestiality fame: <<print Math.trunc($fame.bestiality)>>
		<br>
		Exhibitionism fame: <<print Math.trunc($fame.exhibitionism)>>
		<br>
		<<if $pregnancyTesting>> <!-- ToDo: pregnancy, remove to properly enable -->
			Pregnancy fame: <<print Math.trunc($fame.pregnancy)>>
			<br>
		<</if>>
		Combat fame: <<print Math.trunc($fame.scrap)>>
		<br>
		Kindness fame: <<print Math.trunc($fame.good)>>
		<br>
		Business fame: <<print Math.trunc($fame.business)>>
		<br>
		<<if $dev is 1>>
			Pimp fame: <<print Math.trunc($fame.pimp)>>
			<br>
		<</if>>
		Socialite fame: <<print Math.trunc($fame.social)>>
		<br>
		Model fame: <<print Math.trunc($fame.model)>>
		<br><br>
	<</foldout>>

	<<foldout false "_violenceFoldout">>
		<span class="gold">Transformations</span>
		Wolfiness: <<print Math.trunc($wolfbuild)>> (30+ for full transformation)
		<br>
		Wolf manifestation: <<print Math.trunc($wolfgirl)>>
		<br>
		Cattiness: <<print Math.trunc($catbuild)>> (50+ for full transformation)
		<br>
		Cat manifestation: <<print Math.trunc($cat)>>
		<br>
		<<if $hallucinations gte 2 or $bestialitydisable is "t">>Harpyness<<else>>Birdieness<</if>>: <<print Math.trunc($birdbuild)>> (30+ for full transformation)
		<br>
		<<if $hallucinations gte 2 or $bestialitydisable is "t">>Harpy<<else>>Bird<</if>> manifestation: <<print Math.trunc($harpy)>>
		<br>
		Bovinity: <<print Math.trunc($cowbuild)>> (30+ for full transformation)
		<br>
		Cow manifestation: <<print Math.trunc($cow)>>
		<br>
		Angelicness: <<print Math.trunc($angelbuild)>> (50+ for full transformation)
		<br>
		Angel manifestation: <<print Math.trunc($angel)>>
		<br>
		Demonicness: <<print Math.trunc($demonbuild)>> (30+ for full transformation)
		<br>
		Demonic manifestation: <<print Math.trunc($demon)>>
		<br>
		Fallen manifestation:
		<<print ($fallenangel is undefined ? 0 : Math.trunc($fallenangel))>>
		<br><br>
	<</foldout>>

	<<foldout false "_violenceFoldout">>
		<span class="gold">Anal Pregnancy</span>
		<<set _pregnancy to $sexStats.anus.pregnancy>>
		<<for _i to 0; _i lt _pregnancy.maxCount; _i++>>
		<<if _pregnancy[_i] isnot null>>
		<<if _pregnancy[_i].fertilised>>
		Anal slot <<=_i+1>> is pregnant with a _pregnancy[_i].stats.gender _pregnancy[_i].creature, and will be ready to deliver in less than <<=_pregnancy[_i].daysLeft + 1>> days.<br>
		<<else>>
		Anal slot <<=_i+1>> has a _pregnancy[_i].stats.gender _pregnancy[_i].creature egg ready to be fertilised.<br>
		<</if>>
		<<else>>
		Anal slot <<=_i+1>> is empty.<br>
		<</if>>
		<</for>>
	<</foldout>>
</div>
<</widget>>