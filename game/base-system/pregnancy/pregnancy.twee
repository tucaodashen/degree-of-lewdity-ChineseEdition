:: Pregnancy [widget]
<<widget "impregnate">>
<<if _args[0] and $analpregdisable is "f">>
	<<set _pregnancy to $sexStats.anus.pregnancy>>
	<<if _pregnancy.count lt _pregnancy.maxCount>>
		<<set $calc to [random(0,100), (1 + _args[1]) / (_pregnancy.count + 1)]>>
		<<if $calc[0] lte $calc[1] or _args[2]>>
			<!-- chances of impregnation. Guaranteed with parasites based on futa -->
			<<for _i to 0; _i lt _pregnancy.maxCount; _i++>>
				<<if _pregnancy[_i] is null>>
					<!-- Encorce non-plural names -->
					<<switch _args[0]>>
						<<case "slimes" "eels" "worms" "snakes" "spiders" "slugs" "maggots">>
							<<set _creatureType to toTitleCase(_args[0])>>
							<<set _creatureType to _creatureType.substring(0,_creatureType.length - 1)>>
						<<default>>
							<<set _creatureType to toTitleCase(_args[0])>>
					<</switch>>
					<!-- creature: the type of creature it is. "Lurker", "Slime", "Pale Tentacle", etc -->
					<!-- fertilised: whether it's fertilised or not. Parasites need to be fertilised before they can be birthed -->
					<!-- daysLeft: how long until it can be birthed. Birthing is possible when it's 3 or less, but significantly more likely at 0 -->
					<!-- timeLeft: how long until it prompts a daily event. Speed impacts how fast it goes down -->
					<!-- stats.growth: how long it takes to birth, and how much the parasite is worth when selling-->
					<!-- stats.speed: how often it prompts a daily event. Also determines the parasite's activity -->
					<<if _args[2]>>
						<!-- Futa-birthed parasites -->
						<<set _egg to {
							"creature": _args[0],
							"fertilised": true,
							"daysLeft": Math.floor(_args[2].stats.growth * 0.8),
							"timeLeft": null,
							"stats":{
								"growth": Math.floor(_args[2].stats.growth * 0.8),
								"speed": Math.floor(_args[2].stats.speed * 0.8)
							}
						}>>
					<<else>>
						<!-- Non-futa parasites -->
						<<set _egg to {
							"creature": _creatureType,
							"fertilised": false,
							"daysLeft": 1,
							"timeLeft": null,
							"stats":{
								"growth": random(7,14),
								"speed": random(60,360)
							}
						}>>
						<<if _creatureType.includes("Pale")>>
							<!-- Pale parasites have significantly better activity -->
							<<set _egg.stats.speed to clone(_egg.stats.speed * 0.6)>>
						<<elseif _creatureType.includes("Tentacle") or _creatureType is "Vine">>
							<!-- Tentacles and vines have better activity. Done in an elseif so pale tentacles don't get the calculation twice -->
							<<set _egg.stats.speed to clone(_egg.stats.speed * 0.9)>>
						<</if>>
						<<if _creatureType is "Vine" and random(0,100) gt 99>>
							<!-- Vine Vine easter egg lol -->
							<<set _egg.creature += " Vine">>
							<<set _egg.stats.growth-->>
						<</if>>
						<<if _creatureType is "Lurker">>
							<!-- Lurkers have better activity, but sell for less and take longer to birth -->
							<<run _egg.stats.growth += 14>>
							<<for _l to 0; _l lt 3; _l++>>
								<<if _egg.stats.speed gte 100>>
									<<run _egg.stats.speed -= 50>>
								<</if>>
							<</for>>
						<</if>>
					<</if>>

					<<set _genderCheck to Math.random()>>
					<<if _genderCheck lt 0.7>>
						<!-- Female parasites are most likely -->
						<<set _egg.stats.gender to "Female">>
					<<elseif _genderCheck lt 0.8 or _pregnancy.motherStatus is 0 or _pregnancy.motherStatus is 2>>
						<!-- You can only get a futa if motherStatus is 1, aka if you're ready for a futa and don't currently have one -->
						<<set _egg.stats.gender to "Male">>
					<<else>>
						<<set _egg.stats.gender to "Futa">>
						<<set _egg.stats.lastEgg to Math.floor(_egg.stats.growth / 3)>>
					<</if>>

					<!-- adding the new parasite to $sexStats.anus.pregnancy -->
					<<set _pregnancy[_i] to clone(_egg)>>
					<<set _pregnancy.count++>>

					<<if _args[2] is undefined>>
						<!-- Parasites require fertilisation, aka an anal creampie, before they can be birthed. Tentacles, lurkers and futa-born parasites are automatically fertilised -->
						<<set _pregnancy.fertile to true>>
						<<set _impreg to true>>
					<</if>>
					<<break>>
				<</if>>
			<</for>>
		<</if>>
	<</if>>
<</if>>
<</widget>>

<<widget "fertilise">>
<!-- Runs whenever someone ejaculates in your anus -->
<<if $sexStats.anus.pregnancy.fertile is true and $analpregdisable is "f">>
	<<set _pregnancy to $sexStats.anus.pregnancy>>
	<<for _i to 0; _i lt _pregnancy.maxCount; _i++>>
		<<if _pregnancy[_i] isnot null>>
			<<if _pregnancy[_i].fertilised is false>>
				<<set _pregnancy[_i].fertilised to true>>
				<<set _pregnancy[_i].daysLeft to _pregnancy[_i].stats.growth>>
				<<if _pregnancy.lowestDaysLeft is null>>
					<<set _pregnancy.lowestDaysLeft to _pregnancy[_i].daysLeft>>
				<<else>>
					<<if _pregnancy[_i].daysLeft lt _pregnancy.lowestDaysLeft>>
						<<set _pregnancy.lowestDaysLeft to _pregnancy[_i].daysLeft>>
					<</if>>
				<</if>>
				<<if _pregnancy[_i].stats.gender is "Futa">>
					<<set _pregnancy.motherStatus to 2>>
					<<set _pregnancy.maxCount to 4>>
				<</if>>
			<</if>>
		<</if>>
	<</for>>
	<<set _pregnancy.fertile to false>>
	<<set _pregnancy.fertilised to true>>
<</if>>
<</widget>>

<<widget "pregProgressDay">>
<<if $analpregdisable is "f">>
	<<set _pregnancy to $sexStats.anus.pregnancy>>
	<<set _pregnancy.lowestDaysLeft to null>>
	<<if $deviancy gte 75>><<set _pregnancy.namesChildren to true>><<else>><<set _pregnancy.namesChildren to false>><</if>>
	<<for _i to 0; _i lt _pregnancy.maxCount; _i++>>
		<<if _pregnancy[_i] isnot null>>
			<<if _pregnancy[_i].daysLeft is 0 and _pregnancy[_i].fertilised is false>>
				<!-- Unfertilised parasites get removed -->
				<<set _remove to true>>
			<<else>>
				<<if _pregnancy[_i].daysLeft gt 0>>
					<<set _pregnancy[_i].daysLeft -= 1>>
				<</if>>
				<<if _pregnancy[_i].daysLeft lt _pregnancy.lowestDaysLeft and _pregnancy.fertilised is true>>
					<<set _pregnancy.lowestDaysLeft to _pregnancy[_i].daysLeft>>
				<</if>>
			<</if>>
			<<if _pregnancy[_i].stats.gender is "Futa" and _pregnancy[_i].daysLeft lte 3>>
				<!-- Futas only "activate" a few days after initial impregnation -->
				<<if _pregnancy[_i].stats.lastEgg gt 0>>
					<<set _pregnancy[_i].stats.lastEgg -= 1>>
				<<elseif _pregnancy.count lt _pregnancy.maxCount>>
					<<set _pregnancy[_i].stats.lastEgg to Math.floor(_pregnancy[_i].stats.growth / 3)>>
					<<impregnate _pregnancy[_i].creature null _pregnancy[_i]>>
				<</if>>
			<</if>>
			<<if _remove is true>>
				<!-- Remmeber when I said unfertilised parasites get removed? This is where it happens -->
				<<set _pregnancy[_i] to null>>
				<<set _pregnancy.count -= 1>>
			<</if>>
		<</if>>
	<</for>>
<</if>>
<</widget>>

<<widget "pregProgressTime">>
<<if _args[0] and $analpregdisable is "f">>
	<<set _pregnancy to $sexStats.anus.pregnancy>>
	<<set _pregnancy.lowestDaysLeft to null>>
	<<for _i to 0; _i lt _pregnancy.maxCount; _i++>>
		<<if _pregnancy[_i] isnot null>>
			<<if _pregnancy[_i].fertilised is true>>
				<!-- Setting up the daily messages to pop at the top of the screen -->
				<<if _pregnancy[_i].timeLeft is null>>
					<<set _pregnancy[_i].timeLeft to _pregnancy[_i].stats.speed>>
				<<else>>
					<<set _pregnancy[_i].timeLeft -= _args[0]>>
				<</if>>
				<<if _pregnancy[_i].timeLeft lte 0>>
					<!-- The lower the parasite's speed, the more often it will affect daily events -->
					<<set _pregnancy[_i].timeLeft to _pregnancy[_i].stats.speed>>
					<<if $dailyEvent is undefined>>
						<<set $dailyEvent to []>>
					<</if>>
					<!-- dailyEvent0: You feel something large/your grown parasite move in your stomach. -->
					<!-- dailyEvent1: You feel something/one of your parasites move in your stomach. -->
					<!-- dailyEvent2: Your stomach rumbles a little. You hope the noise hasn't attracted any attention. -->
					<!-- dailyEvent3: You feel a little lightheaded for a moment. -->
					<<if $dailyEvent.length lt _pregnancy.count>>
						<<if _pregnancy[_i].stats.gender is "Futa" and _pregnancy[_i].daysLeft lte 3>>
							<<if (_pregnancy[_i].daysLeft lt 3 and $rng lt 20) or (_pregnancy[_i].daysLeft is 0 and $rng lt 50)>>
								<<if _pregnancy.seenDoctor is 2>><<set _pregnancy.seenDoctor to 3>><</if>>
								<<set $dailyEvent.pushUnique(0)>>
							<<elseif _pregnancy[_i].daysLeft is 0 or $rng lt 60>>
								<<set $dailyEvent.pushUnique(2)>>
							<</if>>
						<<else>>
							<<if (_pregnancy[_i].daysLeft is 0 and $rng lt 50) or (_pregnancy[_i].daysLeft lte 3 and $rng lt 20)>>
								<<set $dailyEvent.pushUnique(1)>>
								<<if _pregnancy.seenDoctor is 0>><<set _pregnancy.seenDoctor to 1>><</if>>
								<<if _pregnancy.seenDoctor gte 2>><<set _pregnancy.feltMovement to true>><</if>>
							<<elseif _pregnancy[_i].daysLeft is 0 or (_pregnancy[_i].daysLeft lte 3 and $rng lt 60)>>
								<<set $dailyEvent.pushUnique(2)>>
							<<elseif _pregnancy[_i].daysLeft lte 7 and $rng lt 50>>
								<<set $dailyEvent.pushUnique(3)>>
							<</if>>
						<</if>>
					<</if>>
				<</if>>
			<</if>>
		<</if>>
	<</for>>
<</if>>
<<if $sexStats.vagina.pregnancy.waterBreaking>>
	<<stress `Math.ceil(_args[0] * 0.75)`>>
<</if>>
<</widget>>

<<widget "moveCreature">>
/*0 -> _pregnancy[_i] or location (any but portable)*/
/*1 -> Type*/
/*2 -> locationId*/
<<if _args[0] isnot null and _args[1]>>
	<<set _portable to $container.portable>>
	<<set _container to $container[$phase]>>
	<<set _pregnancy to $sexStats.anus.pregnancy>>

	<<set _result to _args[1]>>
	<<switch _args[0]>>
		<<case 0 1 2 3>>
			<!-- With a number as argument 0, it takes the parasite of that argument in your current pregnancy item -->
			<<set _creature to clone(_pregnancy[_args[0]])>>
		<<default>>
			<!-- With a string as argument 0, it takes a parasite from the container matching the argument. Which parasite it takes corresponds to argument 2 -->
			<!-- Currently only used when transferring parasites for selling in :: Containers, inside a for loop -->
			<<if _args[2] isnot null>>
				<<set _creature to clone($container[_args[0]].creatures[_args[2]])>>
			<</if>>
	<</switch>>

	<<if _creature>>
		<<if _result is "destroy">>
			<!-- Simply gets rid of the parasite -->
			<<set _creature to null>>
			<<removeCreature _args[0] _args[2]>>
		<<elseif _result is "portable">>
			<!-- Transfers the parasites for selling. The value of the parasite depends on its growth stat -->
			<<set _portable.creatures.push(clone(_creature))>>
			<<set _value to Math.floor(1000 / _creature.stats.growth)>>
			<<set _portable.value += _value>>
			<<removeCreature _args[0] _args[2]>>
		<<elseif _result is "replace" and _args[2] isnot null and _args[0] gte 0 and _args[0] lte 3>>
			<!-- Replaces an existing parasite, for when you birth more than you can currently store -->
			<!-- The replaced parasite gets transferred for selling -->
			<<if _container.creatures[_i] isnot undefined>>
				<<if _container.creatures[_i] isnot null>>
					<<set _portable.creatures.push(clone(_container.creatures[_args[2]]))>>
					<<set _value to Math.floor(1000 / _container.creatures[_args[2]].stats.growth)>>
					<<set _portable.value += _value>>
					<<set _container.creatures[_args[2]] to clone(_creature)>>
					<<set _replaced to true>>
				<</if>>
			<</if>>
			<<if _replaced isnot true>>
				<<set _container.creatures[_args[2]] to clone(_creature)>>
				<<set _container.count += 1>>
			<</if>>
			<<removeCreature _args[0]>>
		<<elseif _result is "container">>
			<!-- Keeps the parasite and moves it to the current container -->
			<<set _moveTo to false>>
			<<for _containerSlot to 0; _containerSlot lt _container.maxCount; _containerSlot++>>
				<<if _container.creatures[_containerSlot] is undefined>>
					<<set _moveTo to true>>
				<<elseif _container.creatures[_containerSlot] is null>>
					<<set _moveTo to true>>
				<</if>>
				<<if _moveTo is true>>
					<<set $container[$phase].creatures[_containerSlot] to clone(_creature)>>
					<<set $container[$phase].count += 1>>
					<<removeCreature _args[0] _args[2]>>
					<<break>>
				<</if>>
			<</for>>
		<</if>>
	<</if>>
<</if>>
<</widget>>

<<widget "removeCreature">>
	<<if _args[0] isnot null>>
		<<set _pregnancy to $sexStats.anus.pregnancy>>
		<<switch _args[0]>>
			<<case 0 1 2 3>>
				<!-- With a number as argument 0, it removes the parasite of that argument in your current pregnancy item -->
				<<set _pregnancy[_args[0]] to null>>
				<<set _pregnancy.count -= 1>>
				<<set _pregnancy.givenBirth += 1>>
				<<if _pregnancy.motherStatus is 0 and _pregnancy.givenBirth gte 3>>
					<<set _pregnancy.motherStatus to 1>>
					<<set _pregnancy.maxCount to 2>>
				<</if>>
			<<default>>
				<!-- With a string as argument 0, it removes a parasite from the container matching the argument. Which parasite it takes corresponds to argument 1 -->
				<<if _args[1] isnot null>>
					<<set $container[_args[0]].creatures[_args[1]] to null>>
					<<set $container[_args[0]].count -= 1>>
				<</if>>
		<</switch>>
	<</if>>
<</widget>>

<<widget "menstruationCycle">>
<<if $sexStats.vagina.menstruation.running is true and $player.vaginaExist>>
	<<set _menstruation to $sexStats.vagina.menstruation>>
	<<set _pregnancy to $sexStats.vagina.pregnancy>>
	<<set _pills to $sexStats.pills>>
	<<set $_last_preg_pill to clone(_pills.lastTaken.pregnancy)>>
	<<switch $sexStats.vagina.menstruation.currentState>>
		<<case "normal">>
			<<if _menstruation.currentDay lt _menstruation.currentDaysMax>>
				/*Continue the cycle again*/
				<<if _menstruation.currentDay gte _menstruation.currentDaysMax / 2 and _menstruation.lastDaysMax isnot _menstruation.currentDaysMax>>
				<</if>>
				<<if _menstruation.currentDay lt _menstruation.stages[1]>>
					/*Menstrual phase - period occurs right at the start of this part*/
					<<if $_last_preg_pill is "fertility booster" and _pills.pills[$_last_preg_pill].doseTaken gte 2>>
						<<set _menstruation.currentDay += 0.5>>
					<</if>>
					<<if $skin.pubic.type is "magic" and $skin.pubic.special is "pregnancy">>
						<<set _menstruation.currentDay += 0.5>>
					<</if>>
					<<if $_last_preg_pill is "contraceptive" and (random(0,100) gte 50 or _pills.pills[$_last_preg_pill].doseTaken gte 2)>>
					<<else>>
						<<set _menstruation.currentDay += 0.5>>
					<</if>>
				<<elseif _menstruation.currentDay lt _menstruation.stages[2]>>
					/*Follicular phase*/
					<<if $_last_preg_pill is "fertility booster" and _pills.pills[$_last_preg_pill].doseTakenn gte 2 and _menstruation.currentDay lt _menstruation.stages[2]>>
						<<set _menstruation.currentDay += 0.5>>
					<</if>>
					<<if $skin.pubic.type is "magic" and $skin.pubic.special is "pregnancy" and _menstruation.currentDay lt _menstruation.stages[2]>>
						<<set _menstruation.currentDay += 0.5>>
					<</if>>
					<<if _menstruation.currentDay lt _menstruation.stages[2]>>
						<<set _menstruation.currentDay += 0.5>>
					<</if>>
				<<elseif _menstruation.currentDay lt _menstruation.stages[3]>>
					/*Ovulation phase*/
					<<set _menstruation.currentDay += 0.5>>
					<<set _menstruation.lastDaysMax to _menstruation.currentDaysMax>>

					/*Check for pregnancy*/
					<<set _sperm to clone($sexStats.vagina.sperm)>>
					<<set _sperm2 to []>>
					<<set _trackedNPCs to []>>
					<<for $_label, $_value range _sperm>>
						<<run _trackedNPCs.pushUnique($_label)>>
						<<set $_count to ($_value.count.length lt 500 ? $_value.count.length : 500)>>
						<<for _i to 0; _i lt $_value.count.length; _i++>>
							<<set $_count2 to ($_value.count[_i][1] lt 500 ? $_value.count[_i][1] : 500)>>
							<<for _j to 0; _j lte $_count2; _j++>>
								<<set _sperm2.push([$_value.type, $_label])>>
							<</for>>
						<</for>>
					<</for>>
					<<if $_last_preg_pill is "fertility booster">>
						<<set _fertility to true>>
						<<switch _pills.pills[$_last_preg_pill].doseTaken>>
							<<case 1>><<set _fertilityBoost to 0.8>>
							<<case 2>><<set _fertilityBoost to 0.6>>
							<<case 3>><<set _fertilityBoost to 0.4>>
							<<case 4 5 6 7 8>><<set _fertilityBoost to 0.3>>/*Incase it ever gets increased passed the intended number*/
						<</switch>>
					<<elseif $_last_preg_pill is "contraceptive">>
						<<set _contraceptive to true>>
						<<set _fertilityBoost to 1>>
					<<else>>
						<<set _fertilityBoost to 1>>
					<</if>>
					<<if $skin.pubic.type is "magic" and $skin.pubic.special is "pregnancy">>
						<<set _fertilityBoost -= 0.2>>
					<</if>>
					<<set _baseChance to Math.floor((100 - $baseVaginalPregnancyChance) * _fertilityBoost)>>
					<<set _rng to random(0,(_sperm2.length gte _baseChance ? _sperm2.length : _baseChance))>>
					<<if _contraceptive and (random(0,100) gte 10 or _pills.pills[$_last_preg_pill].doseTaken gte 2)>>
						/*Player doesn't get pregnant due to contraceptive*/
					<<elseif _sperm2[_rng] isnot undefined>>
						<<set _fatherKnown to Object.keys(_sperm).length is 1>>
						<<switch _sperm2[_rng][0]>>
							<<case "human">>
								/*Human Pregnancy*/
								<<if $playerPregnancyHumanDisable is "f">>
									<<humanPregnancy "pc" `_sperm2[_rng][1]` _fatherKnown>>
								<</if>>
							<<case "wolf">>
								<<if $playerPregnancyBeastDisable is "f">>
									<<wolfPregnancy "pc" `_sperm2[_rng][1]` _fatherKnown false>>
								<</if>>
							<<case "wolfboy" "wolfgirl">>
								<<if $playerPregnancyBeastDisable is "f">>
									<<wolfPregnancy "pc" `_sperm2[_rng][1]` _fatherKnown true>>
								<</if>>
						<</switch>>
					<</if>>
				<<else>>
					/*Luteal phase*/
					<<if $_last_preg_pill and _pills.pills[$_last_preg_pill].doseTaken gte 2>>
						<<set _menstruation.currentDay += 0.5>>
					<</if>>
					<<if $skin.pubic.type is "magic" and $skin.pubic.special is "pregnancy">>
						<<set _menstruation.currentDay += 0.5>>
					<</if>>
					<<if $_last_preg_pill is "contraceptive" and (random(0,100) gte 50 or _pills.pills[$_last_preg_pill].doseTaken gte 2)>>
					<<else>>
						<<set _menstruation.currentDay += 0.5>>
					<</if>>
				<</if>>
			<<else>>
				/*Start the cycle again*/
				<<restartMenstruationCycle>>
				<<set _menstruation.periodEnabled to true>>
			<</if>>
		<<case "pregnant">>
			<<if _pregnancy.ultrasoundDone gt 0>>
				<<set _pregnancy.ultrasoundDone-->>
			<</if>>
			<<switch _pregnancy.type>>
				<<case "human">><<set _multiplier to (1/(1/9*$humanPregnancyMonths))>>
				<<case "wolf">><<set _multiplier to (1/(1/12*$wolfPregnancyWeeks))>>
				<<default>><<set _multiplier to 1>>
			<</switch>>
			<<set _pregnancy.timer -= parseFloat((0.5 * _multiplier).toFixed(2))>>
			/*Limited max size to when you have multiple babies now that the image changes are generated automatically*/
			<<set _pregnancy.bellySize to Math.clamp(Math.floor((1 - (_pregnancy.timer / _pregnancy.timerStart))*(18+Math.clamp(_pregnancy.fetus.length,1,3))),0,20)>>

			/*Keeping fatigue low should help morning sickness*/
			<<if between(_pregnancy.timer, _pregnancy.timerStart * 0.75, _pregnancy.timerStart * 0.85)>>
				/*Early Morning sickness*/
				/*Light Nausea/dizzyness at any time of day, but mostly when waking up*/
				<<if random(0,100) gte 30>>
					<<set _pregnancy.morningSicknessWaking to 1>>
				<</if>>
				<<if random(0,100) gte 30>>
					<<set _pregnancy.morningSicknessGeneral to 1>>
				<</if>>
			<<elseif between(_pregnancy.timer, _pregnancy.timerStart * 0.55, _pregnancy.timerStart * 0.76)>>
				/*Morning sickness*/
				/*Nausea/dizzyness at any time of day, but mostly when waking up*/
				/*First pregnancy should be worse*/
				<<set _pregnancy.morningSicknessWaking to [1,2,2].pluck()>>
				<<if _pregnancy.totalBirthEvents is 0 and _pregnancy.morningSicknessWaking lt 2>>
					<<set _pregnancy.morningSicknessWaking to 2>>
				<</if>>
				<<if random(0,100) gte 20>>
					<<set _pregnancy.morningSicknessGeneral to [1,2,2].pluck()>>
				<</if>>
			<</if>>
			<<if _pregnancy.timer lte 0>>
				<<set _pregnancy.waterBreaking to true>>
				/*Give birth.....somehow*/
				<<if $player.breastsize lt 3 and $player.breastsize lt $breastsizemax>>
					<<set $player.breastsize += 1>><<set $breastgrowthtimer to 700>>
					<<if $player.breastsize lt $breastsizemax>>
						<<set $player.breastsize += 1>>
					<</if>>
					<<set $breastgrowthmessage to $player.breastsize>><<set $effectsmessage to 1>>
					<<set $player.breastsize to Math.clamp($player.breastsize, 0, 12)>>
				<</if>>
				<<if $lactating isnot 1 and $player.breastsize gt 0>>
					<<set $lactating to 1>>
					<<set $lactation_pressure to 100>>
					<<milkvolume 50>>
					<<set $effectsmessage to 1>>
					<<set $lactationmessage to 1>>
				<</if>>
			<</if>>
		<<case "recovering">>
			<<set _menstruation.recoveryTime -= 0.5>>
			<<if $_last_preg_pill is "fertility booster">>
				<<switch _pills.pills[$_last_preg_pill].doseTaken>>
					<<case 1>><<set _menstruation.recoveryTime -= 0.5>>
					<<case 2 3 4>><<set _menstruation.recoveryTime -= 1>>
				<</switch>>
			<</if>>
			<<if $skin.pubic.type is "magic" and $skin.pubic.special is "pregnancy">>
				<<set _menstruation.recoveryTime -= 0.5>>
			<</if>>
			<<if _pregnancy.totalBirthEvents gt 2>>
				<<set _menstruation.recoveryTime -= 0.5>>
			<</if>>
			<<set _menstruation.recoveryStage to Math.floor((1 - (_menstruation.recoveryTime / _menstruation.recoveryTimeStart))*5)>>
			<<if _menstruation.recoveryTime lte 0>>
				<<set $effectsmessage to 1>>
				<<set $recovered_from_pregnancy to 1>>
				/*Ready to give birth again*/
				<<restartMenstruationCycle>>
				<<set _menstruation.currentState to "normal">>
				<<set _menstruation.recoveryTime to null>>
				<<set _menstruation.recoveryTimeStart to null>>
				<<set _menstruation.recoveryStage to null>>
			<</if>>
	<</switch>>
<</if>>
<<updateRecordedSperm>>
<</widget>>

<<widget "playerPregStatSetup">>
<<set _pregnancy to $sexStats.vagina.pregnancy>>
<<set _menstruation to $sexStats.vagina.menstruation>>
<<set _menstruation.currentState to "pregnant">>
<<set _pregnancy.potentialFathers to clone(_trackedNPCs)>>
<</widget>>

<<widget "updateRecordedSperm">>
<<set _sperm to $sexStats.vagina.sperm>>
<<for $_label, $_value range _sperm>>
	<<for _i to $_value.count.length - 1; _i gte 0; _i-->>
		<<set $_value.count[_i][0] -= 0.5>>
		<<if $_value.count[_i][0] lte 0>>
			<<run _sperm[$_label].count.deleteAt(_i)>>
		<</if>>
	<</for>>
	<<if $_value.count.length is 0>>
		<<run delete _sperm[$_label]>>
	<</if>>
<</for>>
<</widget>>

/*args[0] - potential mother, args[1] - npc fullDescription or "pc", _args[2] - type of pregnancy, _args[3] - _daysTillRemoval override for specific events*/
<<widget "recordVaginalSperm">>
/*ToDo: Pregnancy, remove $pregnancyTesting to properly enable*/
<<if _args[0] and _args[1] and _args[2] and $pregnancyTesting>>
	<<if _args[0] is "pc">>
		<<set $_sperm to $sexStats.vagina.sperm>>
	<<elseif $NPCNameList.includes(_args[0]) and $NPCName[$NPCNameList.indexOf(_args[0])].pregnancy.enabled>>
		<<set $_sperm to $NPCName[$NPCNameList.indexOf(_args[0])].pregnancy.sperm>>
	<</if>>
	<<if $_sperm>>
		<<if $_sperm[_args[1]] is undefined>>
			<<set $_sperm[_args[1]] to {"type":_args[2], count:[]}>>
		<</if>>
		<<if _args[3]>>
			<<set _daysTillRemoval to _args[3]>>
		<<else>>
			<<set _daysTillRemoval to random(6,10) * 0.5>>
		<</if>>
		<<for $_i to 0; $_i lt $_sperm[_args[1]].count.length;$_i++>>
			<<if $_sperm[_args[1]].count[$_i][0] is _daysTillRemoval>>
				<<set $_sperm[_args[1]].count[$_i][1] += 1>>
				<<set $_found to true>>
			<</if>>
		<</for>>
		<<if $_found isnot true>>
			<<set $_sperm[_args[1]].count.push([_daysTillRemoval, 1])>>
		<</if>>
	<</if>>
<</if>>
<</widget>>

<<widget "bodyPregCalc">>
<<switch $devlevel>>
	<<case 6>><<set _bodySize to ["tiny","tiny","tiny","small","small","normal","large"]>>
	<<case 10>><<set _bodySize to ["tiny","tiny","small","small","small","normal","normal","large"]>>
	<<case 12>><<set _bodySize to ["tiny","small","small","normal","normal","normal","large","large"]>>
	<<case 16>><<set _bodySize to ["tiny","small","normal","normal","large","large","large"]>>
	<<default>>
<</switch>>
<<set _hairColour to [$naturalhaircolour, $naturalhaircolour, $naturalhaircolour, $naturalhaircolour,"red","jetblack","black","brown","burntorange","platinumblond","strawberryblond","ginger","ashyblond","blond"]>>
<</widget>>

/*args[0] - pc or npc, args[1] - child #, _args[2] - location*/
<<widget "giveBirthToChild">>
<<if _args[0] and _args[1] isnot undefined and _args[2]>>
	<<if _args[0] is "pc">>
		<<set $_pregnancy to $sexStats.vagina.pregnancy>>
	<<elseif $NPCName[$NPCNameList.indexOf(_args[0])].pregnancy.enabled>>
		<<set $_pregnancy to $NPCName[$NPCNameList.indexOf(_args[0])].pregnancy>>
	<</if>>
	<<if $_pregnancy>>
		<<set $_pregnancy.givenBirth++>>

		/*Child Variables*/
		<<set _child to clone($_pregnancy.fetus[_args[1]])>>
		<<set _child.born to {"day":clone($monthday), "month":clone($month[0].toUpperCase() + $month.substring(1)), "year":clone($year)}>>
		<<getUsedChildrenNames>>
		<<set _child.name to generateBabyName(_child.name, _child.gender, _usedChildrenNames)>>
		<<set _child.birthId to $_pregnancy.totalBirthEvents + $pregnancyStats.npcTotalBirthEvents + 1>>
		<<set _child.childId to $pregnancyStats.playerChildren + $pregnancyStats.npcChildren + $pregnancyStats.npcChildrenUnrelatedToPlayer + 1>>
		<<set _child.location to _args[2]>>
		<<set _child.birthLocation to _args[2]>>
		<<set $children[_child.childId] to clone(_child)>>
		<<if _child.mother is "pc">>
			<<set $pregnancyStats.playerChildren++>>
			<<switch _child.type>>
				<<case "human">><<set $pregnancyStats.humanChildren++>>
				<<case "wolf">><<set $pregnancyStats.wolfChildren++>>
			<</switch>>
		<<elseif _child.father is "pc">>
			<<set $pregnancyStats.npcChildren++>>
		<<else>>
			<<set $pregnancyStats.npcChildrenUnrelatedToPlayer++>>
		<</if>>
	<<else>>
		An error occured in the widget `giveBirthToChild`. <<print _args[0]>> - <<print _args[1]>> - <<print _args[2]>>
	<</if>>
<</if>>
<</widget>>

/*Only run after pc has given birth to all children*/
<<widget "endPregnancy">>
<<set $_pregnancy to $sexStats.vagina.pregnancy>>
<<set $_menstruation to $sexStats.vagina.menstruation>>
<<switch $_pregnancy.type>>
	<<case "human">>
		<<set $pregnancyStats.humanToysUnlocked to true>>
		<<set $_menstruation.recoveryTime to random(2,3) * $humanPregnancyMonths>>
	<<case "wolf">>
		<<set $pregnancyStats.wolfToysUnlocked to true>>
		<<set $_menstruation.recoveryTime to random(1,2) * $wolfPregnancyWeeks>>
<</switch>>
<<set $_pregnancy.fetus to []>>
<<set $_pregnancy.totalBirthEvents++>>
<<set $_pregnancy.waterBreaking to false>>
<<set $_pregnancy.type to null>>
<<set $_pregnancy.bellySize to 0>>
<<set $_pregnancy.timer to null>>
<<set $_pregnancy.timerStart to null>>
<<set $_pregnancy.awareOf to null>>
<<set $_pregnancy.potentialFathers to []>>

<<set $_menstruation.currentState to "recovering">>
<<set $_menstruation.recoveryTimeStart to clone($_menstruation.recoveryTime)>>
<<set $_menstruation.recoveryStage to 0>>
<<set $_menstruation.periodEnabled to false>>

/* Disabled at vrels request
<<if $player.virginity.vaginal is true>>
	/*In case someone is still a virgin
	<<takeVirginity "giving birth" "vaginal">>
<</if>>*/
<<if $_pregnancy.totalBirthEvents gte 10>>
	<<set $pregnancyStats.mother to 4>>
<<elseif $_pregnancy.totalBirthEvents gte 3>>
	<<set $pregnancyStats.mother to 3>>
<<elseif $_pregnancy.totalBirthEvents gte 2>>
	<<set $pregnancyStats.mother to 2>>
<<else>>
	<<set $pregnancyStats.mother to 1>>
<</if>>
<</widget>>

/*Only run after npc has given birth to all children*/
<<widget "npcEndPregnancy">>
<<set $_pregnancy to $NPCName[$NPCNameList.indexOf(_args[0])].pregnancy>>
<<if $_pregnancy and $_pregnancy.enabled>>
	<<if $_pregnancy.fetus[0].father is "pc">>
		<<switch $_pregnancy.fetus[0].type>>
			<<case "human">><<set $pregnancyStats.humanToysUnlocked to true>>
			<<case "wolf">><<set $pregnancyStats.wolfToysUnlocked to true>>
		<</switch>>
	<</if>>
	<<set $_pregnancy.fetus to []>>
	<<set $_pregnancy.totalBirthEvents++>>
	<<set $_pregnancy.waterBreaking to false>>
	<<set $_pregnancy.type to null>>
	<<set $_pregnancy.bellySize to 0>>
	<<set $_pregnancy.timer to null>>
	<<set $_pregnancy.timerStart to null>>
	<<set $_pregnancy.awareOf to null>>
	<<set $_pregnancy.potentialFathers to []>>
	<<set $pregnancyStats.npcTotalBirthEvents++>>
<</if>>
<</widget>>

/*Don't call outside of the menstruationCycle widget*/
<<widget "restartMenstruationCycle">>
<<set _menstruation.currentDay to 0.5>>
<<set _menstruation.currentDaysMax to _menstruation.baseDays + random(0, _menstruation.baseDaysRng)>>
<<set _stage2 to Math.round(_menstruation.currentDaysMax * 0.17)>>
<<if _stage2 gte 4>>
	<<set _stage2-->>
<</if>>
<<set _stage3 to Math.round(_menstruation.currentDaysMax * 0.5)>>
<<if _stage3 lt 13>>
	<<set _stage3++>>
<<elseif _stage3 gte 18>>
	<<set _stage3-->>
<</if>>
<<set _menstruation.stages to [0, _stage2, _stage3, _stage3 + random(1,2) * 0.5]>>
<</widget>>

/*args[0] - birth location, _args[1] - next passage, _args[2] - time passage, _args[3] - debug*/
<<widget "birthUi">>
<<set $_pregnancy to $sexStats.vagina.pregnancy>>
/*Debug Code*/
<<if _args[3]>>
	<<if _args[3] is "human">>
		<<set $_pregnancy.fetus.push({
			"type": "human",
			"mother": "PurityGuy",
			"motherKnown": true,
			"father": "PurityGuy",
			"fatherKnown": true,
			"born": {"day":null, "month":null, "year":null},
			"concieved": {"day":clone($monthday), "month":clone($month[0].toUpperCase() + $month.substring(1)), "year":clone($year)},
			"gender": "h",
			"features": {"size":"tiny", "hairColour":"blond", "identical":true, "monster":null, "clothes":null, "skinColour":$skinColor.natural},
			"name":null,
			"birthId": clone($_pregnancy.totalBirthEvents) + 1,
			"childId": null,
			"location": null,
			"birthLocation": null,
			"localVariables":{},
		})>>
		<<set $_pregnancy.fetus.push({
			"type": "human",
			"mother": "PurityGuy",
			"motherKnown": true,
			"father": "PurityGuy",
			"fatherKnown": true,
			"born": {"day":null, "month":null, "year":null},
			"concieved": {"day":clone($monthday), "month":clone($month[0].toUpperCase() + $month.substring(1)), "year":clone($year)},
			"gender": "h",
			"features": {"size":"tiny", "hairColour":"blond", "identical":true, "monster":null, "clothes":null, "skinColour":$skinColor.natural},
			"name":null,
			"birthId": clone($_pregnancy.totalBirthEvents) + 1,
			"childId": null,
			"location": null,
			"birthLocation": null,
			"localVariables":{},
		})>>
		<<set $_pregnancy.fetus.push({
			"type": "human",
			"mother": "PurityGuy",
			"motherKnown": true,
			"father": "PurityGuy",
			"fatherKnown": true,
			"born": {"day":null, "month":null, "year":null},
			"concieved": {"day":clone($monthday), "month":clone($month[0].toUpperCase() + $month.substring(1)), "year":clone($year)},
			"gender": "h",
			"features": {"size":"tiny", "hairColour":"blond", "identical":true, "monster":null, "clothes":null, "skinColour":$skinColor.natural},
			"name":null,
			"birthId": clone($_pregnancy.totalBirthEvents) + 1,
			"childId": null,
			"location": null,
			"birthLocation": null,
			"localVariables":{},
		})>>
		<<set $_pregnancy.type to "human">>
	<</if>>
	<<if _args[3] is "wolf">>
		<<set _babyBase to {
			"type": "wolf",
			"mother": "pc",
			"motherKnown": true,
			"father": "Black Wolf",
			"fatherKnown": true,
			"born": {"day":null, "month":null, "year":null},
			"concieved": {"day":clone($monthday), "month":clone($month[0].toUpperCase() + $month.substring(1)), "year":clone($year)},
			"gender": null,
			"features": {"size":null, "hairColour":null, "identical":null, "monster":null, "clothes":null, "skinColour": null},
			"name":null,
			"birthId": clone($_pregnancy.totalBirthEvents) + 1,
			"childId": null,
			"location": null,
			"birthLocation": null,
			"localVariables":{},
		}>>
		<<for $_i to 0; $_i lt 8; $_i++>>
			<<set $_pregnancy.fetus.push(clone(_babyBase))>>
			<<if $_pregnancy.fetus.last().type is "wolfboy" or $_pregnancy.fetus.last().type is "wolfgirl">>
				<<set $_pregnancy.fetus.last().features.monster to "monster">>
			<<else>>
				<<set $_pregnancy.fetus.last().features.monster to 0>>
			<</if>>
			<<set $_pregnancy.fetus.last().gender to (random(0,100) gte 50 ? "f" : "m")>>
			<<if $player.gender is "h" and random(0,100) gte 80>>
				<<set $_pregnancy.fetus.last().gender to "h">>
			<</if>>
			<<set _furColour to ["gray", "brown", "tan", "white"]>>
			<<if $_pregnancy.fetus.last().father is "Black Wolf">>
				<<run _furColour.push("black")>>
				<<run _furColour.push("black")>>
			<</if>>
			<<set $_pregnancy.fetus.last().features.hairColour to _furColour.pluck()>>
			<<bodyPregCalc>>
			<<set $_pregnancy.fetus.last().features.size to _bodySize.pluck()>>
			<<if $_i gt 4 and random(0,100) gte 100 - ($_i * 3)>>
				<<break>>
			<</if>>
		<</for>>
		<<set $_pregnancy.type to "wolf">>
	<</if>>
<</if>>
<div id="birthUi">
	<<for _i to 0; _i lt $_pregnancy.fetus.length; _i++>>
		<<capture _i>>
			<div @id="'child-' + _i" class="childUi">
				<<birthChildElement _i>>
			</div>
		<</capture>>
	<</for>>
</div>
<br>
<<if _args[2]>>
	<<set _hours to Math.floor(_args[2] / 60)>>
	<<set _minutes to _args[2] % 60>>
	<<set _timeString to " (" + (_hours lt 10 ? "0": "") +_hours+":"+(_minutes lt 10 ? "0": "")+_minutes+")">>
<</if>>
<<link [["Next" + (_args[2] ? _timeString : "")|_args[1]]]>>
	<<for _i to 0; _i lt $sexStats.vagina.pregnancy.fetus.length; _i++>>
		<<capture _i>>
			<<giveBirthToChild "pc" _i _args[0]>>
		<</capture>>
	<</for>>
	<<endPregnancy>>
<</link>>
<</widget>>

<<widget "birthChildElement">>
<<set $_pregnancy to $sexStats.vagina.pregnancy>>
<<capture _args>>
	<<if $_pregnancy.fetus[_args[0]].type isnot "human">>
		Type: <<print $_pregnancy.fetus[_args[0]].type[0].toUpperCase() + $_pregnancy.fetus[_args[0]].type.substring(1)>> |
	<</if>>
	Gender:
	<<switch $_pregnancy.fetus[_args[0]].gender>>
		<<case "m">>Male
		<<case "f">>Female
		<<case "h">>Hermaphrodite
	<</switch>>
	<br>
	Mother:
	<<if $_pregnancy.fetus[_args[0]].motherKnown>>
		<<print $_pregnancy.fetus[_args[0]].mother>>
	<<else>>
		????
	<</if>>
	| Father:
	<<if $_pregnancy.fetus[_args[0]].fatherKnown>>
		<<print $_pregnancy.fetus[_args[0]].father>>
	<<else>>
		????
	<</if>>
	<br>
	Size: <<print $_pregnancy.fetus[_args[0]].features.size>> | Hair Colour: <<print $_pregnancy.fetus[_args[0]].features.hairColour>>
	<<if $_pregnancy.fetus[_args[0]].features.skinColour isnot null>>
		| Skin Colour: <<print $_pregnancy.fetus[_args[0]].features.skinColour>>
	<</if>>
	<br>
	<<if $_pregnancy.fetus[_args[0]].features.identical isnot null>>
		Identical: <<print $_pregnancy.fetus[_args[0]].features.identical>>
		<br>
	<</if>>
	<label><<print '<<textbox "$_pregnancy.fetus['+_args[0]+'].name" $_pregnancy.fetus['+_args[0]+'].name>>'>></label>
	<br>
	<span class="no-numberify"><<link "Random Name">>
		<<getUsedChildrenNames>>
		<<set $sexStats.vagina.pregnancy.fetus[_args[0]].name to generateBabyName(undefined, $sexStats.vagina.pregnancy.fetus[_args[0]].gender, _usedChildrenNames)>>
		<<replace `"#child-" + _args[0]`>><<birthChildElement _args[0]>><</replace>>
	<</link>></span>
	<small class="right">
		saveId: <<print $saveId>>
		<<if $saveName isnot "">>
			| name: <<print $saveName>>
		<</if>>
	</small>
<</capture>>
<</widget>>

<<widget "wakingEffects">><<silently>>
/*ToDo: Pregnancy, remove $pregnancyTesting to properly enable*/
<<if $pregnancyTesting is undefined>>
<<elseif _args[0] and $sexStats.vagina.menstruation.currentState is "pregnant" or ($sexStats.vagina.menstruation.currentState is "normal" and ($playerPregnancyHumanDisable is "f" or $playerPregnancyBeastDisable is "f"))>>
	<<set $_pregnancy to $sexStats.vagina.pregnancy>>
	<<set _pills to $sexStats.pills>>
	<<set $_last_preg_pill to clone(_pills.lastTaken.pregnancy)>>
	<<if $_pregnancy.timerStart isnot null>>
		<<set _current to $_pregnancy.timer>>
		<<set _start to $_pregnancy.timerStart>>
	<<else>>
		<<set _current to 100>>
		<<set _start to 100>>
	<</if>>
	<<if $_pregnancy.bellySize gte 8 and $_pregnancy.awareOf is false>>
		<<set _wakingEffects to "bellySize">>
	<<elseif between(_current, 0, _start * 0.1)>>
		<<set _wakingEffects to "nearBirthEvent">>
	<<elseif between(_current, 0, _start * 0.4)>>
		<<set _wakingEffects to "nearBirth">>
	<<elseif ($_pregnancy.morningSicknessWaking gte 1 and random(0,100) gte 50) or $_pregnancy.morningSicknessWaking gte 2>>
		<<if $_pregnancy.morningSicknessWaking gte 2>>
			<<set _wakingEffects to "morningSicknessOnly">>
		<<else>>
			<<set _wakingEffects to "morningSicknessPills">>
		<</if>>
		<<set $_pregnancy.morningSicknessWaking to 0>>
	<<elseif (["contraceptive","fertility booster"].includes($_last_preg_pill) and _pills.pills[$_last_preg_pill].doseTaken gte 2 and random(0,100) gte 75)>>
		<<set _wakingEffects to "morningSicknessPills">>
	<<elseif (["contraceptive","fertility booster"].includes($_last_preg_pill) and _pills.pills[$_last_preg_pill].doseTaken gte 1 and random(0,100) gte 75)>>
		<<set _wakingEffects to "mildIssues">>
	<</if>>
	<<switch _wakingEffects>>
		<<case "mildIssues">>
			<<set _wakingEffect to ["nothing","nothing","lightHeaded","lightHeaded","dizzy","dizzy","dizzy","mildNausea"].pluck()>>
		<<case "morningSicknessPills">>
			<<set _wakingEffect to ["lightHeaded","dizzy","dizzy","dizzy","mildNausea","mildNausea","mildNausea","nausea"].pluck()>>
		<<case "morningSicknessOnly">>
			<<set _wakingEffect to ["lightHeaded","dizzy","mildNausea","nausea","nausea","nausea","nausea","dryheaving","dryheaving","dryheaving"].pluck()>>
		<<case "nearBirth">>
			<<set _wakingEffect to ["lightBabyKick", "babyKick", "babyMovement", "babyHiccup"].pluck()>>
		<<case "nearBirthEvent">>
			<<set _wakingEffect to ["lightBabyKick","babyKick","babyMovement","babyHiccup","earlyContractions","earlyContractions"].pluck()>>
		<<case "bellySize">>
			<<set _wakingEffect to "bellySize">>
	<</switch>>

	<<switch _wakingEffect>>
		<<case "bloated">>
			<<set $_text_output to "You wake feeling a little bloated.">>
		<<case "lightHeaded">>
			<<set $_text_output to "You wake feeling a little lightheaded for a moment.">>
		<<case "dizzy">>
			<<set $_text_output to "You wake feeling a little dizzy but it passes quickly.">>
		<<case "mildNausea">>
			<<set $_text_output to "You wake feeling a little nauseous but it passes quickly.">>
		<<case "nausea">>
			<<set $_text_output to "You wake feeling nauseous but it passes after some time.">>
		<<case "dryheaving">>
			<<if $location is "wolf_cave">>
				<<set $_text_output to "You wake up feeling nauseous, causing you to scramble out of bed to the edge of the cave. You're forced to do a dry heave by it.">>
			<<elseif $location is "farm">>
				<<set $_text_output to "You wake up feeling nauseous, causing you to scramble out of bed to the edge of the barn. You're forced to do a dry heave by it.">>
			<<elseif $location is "tower">>
				<<set $_text_output to "You wake up feeling nauseous, causing you to scramble out of bed to the edge of the tower. You're forced to do a dry heave over it.">>
			<<else>>
				<<set $_text_output to "You wake up feeling nauseous, causing you to scramble out of bed to a nearby bin. You're forced to do a dry heave into it.">>
			<</if>>
			<<if $awareness gte 200 and $sciencetrait gte 4 and $_pregnancy.totalBirthEvents gt 1>>
				<<set $_text_output += " Maybe you should get tested.">>
			<</if>>
		<<case "lightBabyKick">>
			<<set $_text_output to "You wake up feeling a light kick coming from your baby.<<stress -10>><<lstress>>">>
		<<case "babyKick">>
			<<set $_text_output to "You wake up feeling a kick coming from your baby.<<stress -10>><<lstress>><<pain 1>><<gpain>>">>
		<<case "babyMovement">>
			<<set $_text_output to "You wake up feeling your baby moving around.<<stress -10>><<lstress>>">>
		<<case "babyHiccup">>
			<<set $_text_output to "You wake up feeling some baby hiccups.<<stress -10>><<lstress>>">>
		<<case "earlyContractions">>
			<<set $_text_output to "You wake up to a brief and sporadic contraction.<<stress 1>><<gstress>>">>
		<<case "bellySize">>
			<<set $_text_output to "You wake and take a look at your growing belly.">>
			<<if $_pregnancy.potentialFathers.length is 1>>
				<<set $_text_output += " It's clear that "+ $_pregnancy.potentialFathers[0] +" was who got you pregnant.">>
			<<else>>
				<<set $_text_output += " You wonder who got you pregnant.">>
			<</if>>
			<<set $_pregnancy.awareOf to true>>
	<</switch>>
<</if>>
<</silently>><<if $_text_output>><<print $_text_output>><</if>>
<</widget>>

<<widget "pregnancyDailyEvent">><<silently>>
<<if !["Asylum Sleep","Cabin Sleep","Wolf Cave Sleep","Bird Tower Sleep","Livestock Sleep","Farm Abduction wake 4","Sleep","Avery Hotel Morning"].includes($passage) and !_ranPregnancyDailyEvent>>
	<<set _ranPregnancyDailyEvent to true>>
	<<set $_pregnancy to $sexStats.vagina.pregnancy>>
	<<set _pills to $sexStats.pills>>
	<<set $_last_preg_pill to clone(_pills["lastTaken"].pregnancy)>>
	<<if $_pregnancy.timerStart isnot null>>
		<<set _current to $_pregnancy.timer>>
		<<set _start to $_pregnancy.timerStart>>
	<<else>>
		<<set _current to 100>>
		<<set _start to 100>>
	<</if>>
	<<if between(_current, 0, _start * 0.1) and random(0,100) gte 75>>
		<<set _dailyEvents to "nearBirthEvent">>
	<<elseif between(_current, 0, _start * 0.4) and random(0,100) gte 75>>
		<<set _dailyEvents to "nearBirth">>
	<<elseif $_pregnancy.morningSicknessGeneral gte 1 and random(0,100) gte 50>>
		<<if $_pregnancy.morningSicknessGeneral gte 2>>
			<<set _dailyEvents to "morningSicknessOnly">>
		<<else>>
			<<set _dailyEvents to "morningSicknessPills">>
		<</if>>
		<<set $_pregnancy.morningSicknessGeneral -= 1>>
	<<elseif (["contraceptive","fertility booster"].includes($_last_preg_pill) and _pills.pills[$_last_preg_pill].doseTaken gte 2 and random(0,100) gte 75)>>
		<<set _dailyEvents to "morningSicknessPills">>
	<<elseif (["contraceptive","fertility booster"].includes($_last_preg_pill) and _pills.pills[$_last_preg_pill].doseTaken gte 1 and random(0,100) gte 75)>>
		<<set _dailyEvents to "mildIssues">>
	<</if>>
	<<if $sexStats.vagina.menstruation.currentState is "normal" and _dailyEvents is undefined and random(0,100) gte 97>>
		<<set _menstruation to $sexStats.vagina.menstruation>>
		<<if _menstruation.currentDay gte _menstruation.currentDaysMax - 3 or _menstruation.currentDay lte 2>>
			<<set _dailyEvents to "cycleIssues">>
		<</if>>
	<</if>>
	<<switch _dailyEvents>>
		<<case "cycleIssues">>
			<<set _dailyEvent to ["nothing","cramping","bloated","lightHeaded","dizzy","mildNausea","nausea"].pluck()>>
		<<case "mildIssues">>
			<<set _dailyEvent to ["nothing","bloated","lightHeaded","lightHeaded","dizzy","dizzy","dizzy","dizzy","mildNausea"].pluck()>>
		<<case "morningSicknessPills">>
			<<set _dailyEvent to ["lightHeaded","bloated","dizzy","dizzy","dizzy","mildNausea","mildNausea","mildNausea","nausea"].pluck()>>
		<<case "morningSicknessOnly">>
			<<set _dailyEvent to ["lightHeaded","dizzy","mildNausea","nausea","nausea","nausea","nausea"].pluck()>>
		<<case "nearBirth">>
			<<set _dailyEvent to ["lightBabyKick","babyKick","babyMovement","babyHiccup"].pluck()>>
		<<case "nearBirthEvent">>
			<<set _dailyEvent to ["lightBabyKick","babyKick","babyMovement","babyHiccup","earlyContractions","earlyContractions"].pluck()>>
	<</switch>>
	<<switch _dailyEvent>>
		<<case "cramping">>
			<<set $_text_output to "You feel some cramping near your vagina.<<stress 3>><<gstress>>">>
		<<case "bloated">>
			<<set $_text_output to "You feel a little bloated.<<stress 3>><<gstress>>">>
		<<case "lightHeaded">>
			<<set $_text_output to "You feel a little lightheaded for a moment.">>
		<<case "dizzy">>
			<<set $_text_output to "You start feeling a little dizzy but it passes quickly.">>
		<<case "mildNausea">>
			<<set $_text_output to "You start feeling a little nauseous but it passes quickly.">>
		<<case "nausea">>
			<<set $_text_output to "You start feeling nauseous but it passes after some time.">>
		<<case "lightBabyKick">>
			<<set $_text_output to "You feel a light kick coming from your baby.<<stress -10>><<lstress>>">>
		<<case "babyKick">>
			<<set $_text_output to "You feel a kick coming from your baby.<<stress -10>><<lstress>><<pain 1>><<gpain>>">>
		<<case "babyMovement">>
			<<set $_text_output to "You feel your baby moving around.<<stress -10>><<lstress>>">>
		<<case "babyHiccup">>
			<<set $_text_output to "You feel some baby hiccups.<<stress -10>><<lstress>>">>
		<<case "earlyContractions">>
			<<set $_text_output to "You feel a brief and sporadic contraction.<<stress 1>><<gstress>>">>
	<</switch>>
<</if>>
<</silently>><<if $_text_output>><<print $_text_output>><br><</if>>
<</widget>>

<<widget "pregnancyWatersBrokenPassout">>
<<set $_pregnancy to $sexStats.vagina.pregnancy>>
<<set $_pregnancy.waterBreaking to null>>
/*Area specific passout text for alternative pregnancy birth events*/
<<switch _args[0]>>
	<<case "asylum">>
	<<case "forest">>
		<<if $_pregnancy.type is "wolf">>
			/*wolves help you if the pc is pregnanct with wolves?*/
		<<else>>

		<</if>>
	<<case "lake">>
	<<case "tentacleworld">>
		<<if $tentacleEntrance is "mirror">>

		<<else>>

		<</if>>
	<<case "farmroad">>
		<<if $location is "farm" and $_pregnancy.potentialFathers.includes("Alex")>>
			/*Alex can help here*/
		<<else>>

		<</if>>
	<<case "remy">>
	<<case "remyAbduction">>
	<<case "moor">>
	<<case "alley">>
	<<case "arcade">>
	<<case "beach">>
	<<case "bus">>
	<<case "docksSneak">>
	<<case "docks">>
	<<case "home">>
	<<case "hospital">>
	<<case "trash">>
	<<case "sea">>
	<<case "shop">>
	<<case "monsterTower">>
	<<case "street">>
	<<case "compound">>
	<<case "temple">>
	<<case "cave">>
	<<case "prison">>
	<<case "edencabin">>
		<<if $_pregnancy.potentialFathers.includes("Eden")>>
			/*Eden thinks it's his child?*/
		<<else>>

		<</if>>
	<<case "drain">>
	<<case "school">>
	<<case "schoolLibrarian">>
		/*Wake up while being put in an ambulance?*/
	<<case "adultShop">>
	<<default>>
		With your waters broken, you're too stressed to continue.
<</switch>>
<br><br>
/*Link for alternative pregnancy birth events*/
<<switch _args[0]>>
	<<case "forest">>
		<<if $_pregnancy.type is "wolf">>
			/*wolves help you if the pc is pregnanct with wolves?*/
			<<link [[Next|Pregnancy Birth Hospital Wolf 3]]>><<set $stress -= 5000>><<endevent>><</link>>
		<<else>>
			<<link [[Next|Pregnancy Birth Hospital Passout]]>><<set $stress -= 5000>><<endevent>><</link>>
		<</if>>
	<<case "edencabin">>
		<<if $_pregnancy.potentialFathers.includes("Eden")>>
			/*Alternative place to give birth?*/
			<<link [[Next|Pregnancy Birth Hospital Passout]]>><<set $stress -= 5000>><<endevent>><</link>>
		<<else>>
			<<link [[Next|Pregnancy Birth Hospital Passout]]>><<set $stress -= 5000>><<endevent>><</link>>
		<</if>>
	<<case "remy" "remyAbduction">>
		/*Alternative place to give birth?*/
		<<link [[Next|Pregnancy Birth Hospital Passout]]>><<set $stress -= 5000>><<endevent>><</link>>
	<<case "farmroad">>
		<<if $location is "farm" and $_pregnancy.potentialFathers.includes("Alex")>>
			/*Alternative place to give birth?*/
			<<link [[Next|Pregnancy Birth Hospital Passout]]>><<set $stress -= 5000>><<endevent>><</link>>
		<<else>>
			<<link [[Next|Pregnancy Birth Hospital Passout]]>><<set $stress -= 5000>><<endevent>><</link>>
		<</if>>
	<<case "hospital">>
		<<link [[Next|Pregnancy Birth Hospital]]>><<set $stress -= 5000>><<endevent>><</link>>
	<<default>>
		<<link [[Next|Pregnancy Birth Hospital Passout]]>><<set $stress -= 5000>><<endevent>><</link>>
<</switch>>
<</widget>>

<<widget "pregnancyMorningAfterPill">>
<<if $sexStats.vagina.menstruation.currentState is "pregnant">>
	<<set _pregnancy to $sexStats.vagina.pregnancy>>
	<<if between(_pregnancy.timer, _pregnancy.timerStart - 2, _pregnancy.timerStart)>>
		<<set _menstruation to $sexStats.vagina.menstruation>>
		<<set _pregnancy.fetus to []>>
		<<set _pregnancy.waterBreaking to false>>
		<<set _pregnancy.type to null>>
		<<set _pregnancy.bellySize to 0>>
		<<set _pregnancy.timer to null>>
		<<set _pregnancy.timerStart to null>>
		<<set _pregnancy.awareOf to null>>
		<<set _pregnancy.potentialFathers to []>>
		<<set _menstruation.currentState to "normal">>
		<<restartMenstruationCycle>>
	<</if>>
<</if>>
<</widget>>

<<widget "pregnancyGendersText">><<silently>>
	<<set _pregnancy to $sexStats.vagina.pregnancy>>
	<<set $_genders to {m:0,f:0,h:0}>>
	<<run _pregnancy.fetus.forEach(b => $_genders[b.gender]++)>>
	<<if _pregnancy.fetus[0].features.identical is true>>
		<<set $_text_output to "Dr Harper thinks they are all identical <<if _pregnancy.fetus.length is 3>>triplets<<else>>twins<</if>> due to them all being the same gender and their facial features being similar.">>
	<<elseif ($_genders.m is _pregnancy.fetus.length or $_genders.f is _pregnancy.fetus.length or $_genders.h is _pregnancy.fetus.length) and _pregnancy.fetus.length gt 1>>
		<<set $_text_output to "Despite all being the same gender Dr Harper thinks they are not identical due to having slightly different facial features.">>
	<<else>>
		<<set $_text_output to "You have">>
		<<if $_genders.m gt 0>>
			<<switch $_genders.m>>
				<<case 1>><<set $_text_output += " a">>
				<<default>><<set $_text_output += " " + $_genders.m>>
			<</switch>>
			<<set $_text_output += " baby boy">><<if $_genders.m gt 1>><<set $_text_output += "s">><</if>>
			<<if $_genders.f gt 0 and $_genders.h gt 0>>
				<<set $_text_output += ",">>
			<<elseif $_genders.f gt 0 or $_genders.h gt 0>>
				<<set $_text_output += " and">>
			<</if>>
		<</if>>
		<<if $_genders.f gt 0>>
			<<switch $_genders.f>>
				<<case 1>><<set $_text_output += " a">>
				<<default>><<set $_text_output += " " + $_genders.f>>
			<</switch>>
			<<set $_text_output += " baby girl">>
			<<if $_genders.f gt 1>><<set $_text_output += "s">><</if>>
			<<if $_genders.h gt 0>><<set $_text_output += " and">><</if>>
		<</if>>
		<<if $_genders.h gt 0>>
			<<switch $_genders.h>>
				<<case 1>><<set $_text_output += " a">>
				<<default>><<set $_text_output += " " + $_genders.h>>
			<</switch>>
			<<set $_text_output += " baby hermaphrodite">>
			<<if $_genders.h gt 1>><<set $_text_output += "s">><</if>>
		<</if>>
		<<set $_text_output += ".">>
	<</if>>
<</silently>><<if $_text_output>><<print $_text_output>><</if>>
<</widget>>

<<widget "npcPregnancyUpdater">>
/*ToDo: Pregnancy NPC - Add the named npc's name into _enabled to enable for named npc's, then make sure to re-run version update*/
<<set _enabled to []>>
<<for $_i to 0; $_i lt $NPCNameList.length; $_i++>>
	<<if $NPCName[$_i].pregnancy is undefined>>
		<<set $NPCName[$_i].pregnancy to {}>>
	<</if>>
	<<set $_pregnancy to $NPCName[$_i].pregnancy>>
	<<if _enabled.includes($NPCNameList[$_i]) and $NPCName[$_i].pregnancy.enabled is undefined>>
		<<set $_pregnancy.fetus to []>>
		<<set $_pregnancy.givenBirth to 0>>
		<<set $_pregnancy.totalBirthEvents to 0>>
		<<set $_pregnancy.bellySize to 0>>
		<<set $_pregnancy.timer to null>>
		<<set $_pregnancy.waterBreaking to null>>
		<<set $_pregnancy.npcAwareOf to null>>
		<<set $_pregnancy.pcAwareOf to null>>
		<<set $_pregnancy.type to null>>
		<<set $_pregnancy.enabled to true>>
		<<set $_pregnancy.cycleDaysTotal to random(24,32)>>
		<<set $_pregnancy.cycleDay to random(1,$_pregnancy.cycleDaysTotal)>>
		<<set $_pregnancy.cycleDangerousDay to 5>>
		<<set $_pregnancy.sperm to {}>>
		<<switch $NPCNameList[$_i]>>
			<<case "Kylar">><<set $_pregnancy.pills to "fertility">>
			<<case "Alex" "Wren">><<set $_pregnancy.pills to "contraceptive">>
			<<default>><<set $_pregnancy.pills to null>>
		<</switch>>
	<<else>>
		/*For saves that have the variables set, but have no need to be there*/
		<<set $NPCName[$_i].pregnancy to {}>>
	<</if>>
	<<if !$_pregnancy.pregnancyAvoidance>>
		<<switch $NPCNameList[$_i]>>
			<<case "Kylar" "Black Wolf" "Great Hawk">><<set $NPCName[$_i].pregnancyAvoidance to 0>>
			<<case "Robin" "Whitney" "Alex" "Wren">><<set $NPCName[$_i].pregnancyAvoidance to 50>>
			<<default>><<set $NPCName[$_i].pregnancyAvoidance to 100>>
		<</switch>>
	<</if>>
<</for>>
<</widget>>

<<widget "npcPregnancyCycle">>
<<for $_i to 0; $_i lt $NPCNameList.length; $_i++>>
	<<if !$NPCName[$_i].pregnancy.enabled>>
		<<continue>>
	<</if>>
	<<set $_npc to $NPCName[$_i]>>
	<<set $_pregnancy to $NPCName[$_i].pregnancy>>
	<<if $_pregnancy.fetus.length gt 0>>
		<<set $_pregnancy.timer-->>
		<<if $_pregnancy.timer lt $_pregnancy.timerStart * 0.8 and $_pregnancy.npcAwareOf isnot true>>
			<<set $_pregnancy.npcAwareOf to true>>
		<</if>>
		<<if $_pregnancy.timer lte 0>>
			<<if $_pregnancy.timer lte -14>>
				/*Player has not seen the pc recently, sort out the pregnancy in another way*/
			<<else>>
				/*Can deal with the npc in the next event*/
				<<set $_pregnancy.waterBreaking to true>>
			<</if>>
		<</if>>
	<<elseif $npcPregnancyDisable is "f">>
		<<set $_pregnancy.cycleDay++>>
		<<if $_pregnancy.cycleDay gte $_pregnancy.cycleDaysTotal>>
			<<set $_pregnancy.cycleDay to 1>>
		<</if>>
		<<if $_pregnancy.cycleDay is $_pregnancy.cycleDangerousDay>>
			/*NPC may get pregnanct here*/
			<<set _sperm to clone($sexStats.vagina.sperm)>>
			<<set _sperm2 to {}>>
			<<set _trackedNPCs to []>>
			<<set _index to 0>>
			<<for $_label, $_value range $_pregnancy.sperm>>
				<<run _trackedNPCs.pushUnique($_label)>>
				<<set $_count to ($_value.count.length lt 500 ? $_value.count.length : 500)>>
				<<for _i to 0; _i lt $_value.count.length; _i++>>
					<<set $_count2 to ($_value.count[_i][1] lt 500 ? $_value.count[_i][1] : 500)>>
					<<for _j to 0; _j lte $_count2; _j++>>
						<<set _sperm2[_index] to [$_value.type, $_label]>>
						<<set _index++>>
					<</for>>
				<</for>>
			<</for>>
			<<if $_pregnancy.pills is "fertility">>
				<<set _fertility to true>>
				<<set _fertilityBoost to 0.8>>
			<<elseif $_pregnancy.pills is "contraceptive">>
				<<set _contraceptive to true>>
				<<set _fertilityBoost to 1>>
			<<else>>
				<<set _fertilityBoost to 1>>
			<</if>>
			<<set _baseChance to Math.floor((100 - $baseNpcPregnancyChance) * _fertilityBoost)>>
			<<set _rng to random(0,(_index gte _baseChance ? _index : _baseChance))>>
			<<if _contraceptive and random(0,100) gte 10>>
				/*NPC doesn't get pregnant due to contraceptive*/
			<<elseif _sperm2[_rng] isnot undefined>>
				/*NPC gets pregnant*/
				<<set _fatherKnown to Object.keys(_sperm).length is 1>>
				<<switch $_npc.type>>
					<<case "human">>
						<<if $npcPregnancyDisable is "f">>
							<<humanPregnancy $_npc.nam `_sperm2[_rng][1]` _fatherKnown>>
						<</if>>
					<<case "wolf">>
						<<if $npcPregnancyDisable is "f">>
							<<wolfPregnancy $_npc.nam `_sperm2[_rng][1]` _fatherKnown false>>
						<</if>>
					<<case "wolfboy" "wolfgirl">>
						<<if $npcPregnancyDisable is "f">>
							<<wolfPregnancy $_npc.nam `_sperm2[_rng][1]` _fatherKnown true>>
						<</if>>
				<</switch>>
			<</if>>
		<</if>>
	<</if>>
<</for>>
<</widget>>

<<widget "endNpcPregnancy">>

<</widget>>

/*args[0] - mother, _args[1] - father, _args[2] - father known, _args[3] - birthId*/
<<widget "pregnancyBabyBase">>
<<set _babyBase to {
	"type": null,
	"mother": _args[0],
	"motherKnown": true,
	"father": _args[1] or false,
	"fatherKnown": _args[2],
	"born": {"day":null, "month":null, "year":null},
	"concieved": {"day":clone($monthday), "month":clone($month[0].toUpperCase() + $month.substring(1)), "year":clone($year)},
	"gender": null,
	"features": {"size":null, "hairColour":null, "identical":null, "monster":null, "clothes":null, "skinColour": null},
	"name":null,
	"birthId": _args[3],
	"childId": null,
	"location": null,
	"birthLocation": null,
	"localVariables":{},
}>>
<</widget>>

/*args[0] - mother, _args[1] - father, _args[2] - father known*/
<<widget "humanPregnancy">>
<<if _args[0] and _args[1]>>
	<<if _args[0] is "pc">>
		<<pregnancyBabyBase _args[0] _args[1] _args[2]>>
		<<set $_pregnancy to $sexStats.vagina.pregnancy>>
		<<set _pills to $sexStats.pills>>
		<<if !$player.vaginaExist or $_pregnancy.fetus.length>>
			<<set _prevent to true>>
		<</if>>
		<<set $_last_preg_pill to clone(_pills.lastTaken.pregnancy)>>
		<<if $_last_preg_pill is "fertility booster">>
			<<set $_fertility to true>>
		<</if>>
	<<else>>
		<<pregnancyBabyBase _args[0] _args[1] _args[2] true>>
		<<set $_pregnancy to $NPCName[$NPCNameList.indexOf(_args[0])].pregnancy>>
		<<if !$NPCName[$NPCNameList.indexOf(_args[0])].vagina or !$_pregnancy.enabled or $_pregnancy.fetus.length>>
			<<set _prevent to true>>
		<</if>>
		<<if $_pregnancy.pills is "fertility">>
			<<set $_fertility to true>>
		<</if>>
	<</if>>
	<<if $_pregnancy isnot undefined and !_prevent>>
		<<set $_pregnancy.type to "human">>

		<<if random(0,100) gte 66>>
			<<set _identical to true>>
		<<else>>
			<<set _identical to false>>
		<</if>>
		<<set _pregnancyCount to 1>>
		<<if $_fertility>>
			<<set _twinBoost to 20 * _args[0] is "pc" ? _pills.pills["fertility booster"].doseTaken : 1>>
		<<else>>
			<<set _twinBoost to 0>>
		<</if>>
		<<if $_fertility>>
			<<set _tripletBoost to 5 * _args[0] is "pc" ? _pills.pills["fertility booster"].doseTaken : 1>>
		<<else>>
			<<set _tripletBoost to 0>>
		<</if>>
		<<if $skin.pubic.type is "magic" and $skin.pubic.special is "pregnancy">>
			<<set _twinBoost += 20>>
			<<set _tripletBoost += 10>>
		<</if>>
		<<if random(0,100) gte 94 - _twinBoost>><<set _pregnancyCount++>><</if>>
		<<if random(0,100) gte 98 - _tripletBoost>><<set _pregnancyCount++>><</if>>

		/*Ready for the cloning of PurityGuy to begin*/
		<<for $_i to 0; $_i lt _pregnancyCount; $_i++>>
			<<if $_pregnancy.fetus.length && _identical>>
				<<run $_pregnancy.fetus.push(clone($_pregnancy.fetus[0]))>>
			<<else>>
				<<set $_baby to clone(_babyBase)>>

				<<set $_baby.type to "human">>
				<<set $_baby.gender to (random(0,100) gte 50 ? "f" : "m")>>
				<<if ($player.gender is "h" and (random(0,100) gte 75 and ($_baby.mother is "pc" or $_baby.father is "pc")) or ($_baby.mother is "pc" and $_baby.father is "pc"))>>
					<<set $_baby.gender to "h">>
				<</if>>

				<<if _pregnancyCount > 1>>
					<<set $_baby.features.identical to ($_baby.mother is "pc" and $_baby.father is "pc") or _identical>>
				<</if>>

				/*Didn't bother averaging out with the npc since the stats don't exist*/
				<<if $_baby.mother is "pc" and $_baby.father is "pc">>
					<<switch $devlevel>>
						<<case 6>><<set $_baby.features.size to "tiny">>
						<<case 10>><<set $_baby.features.size to "small">>
						<<case 12>><<set $_baby.features.size to "normal">>
						<<case 16>><<set $_baby.features.size to "large">>
					<</switch>>
					<<set $_baby.features.hairColour to $naturalhaircolour>>
				<<else>>
					<<bodyPregCalc>>
					<<set $_baby.features.size to _bodySize.pluck()>>
					<<set $_baby.features.hairColour to _hairColour.pluck()>>
				<</if>>
				<<set $_baby.features.skinColour to $skinColor.natural>>

				<<set $_baby.features.clothes to "naked">>

				<<run $_pregnancy.fetus.push(clone($_baby))>>
			<</if>>
		<</for>>
		<<set $_pregnancy.timer to random(255,305) - ($_pregnancy.fetus.length * 10)>>
		<<set $_pregnancy.timerStart to clone($_pregnancy.timer)>>
		<<if _args[0] is "pc">>
			<<playerPregStatSetup>>
		<<else>>
			<<set $_pregnancy.potentialFathers to [_args[1]]>>
		<</if>>
		<<set $_pregnancy.awareOf to false>>
	<</if>>
<</if>>
<</widget>>

/*args[0] - mother, _args[1] - father, _args[2] - father known, _args[3] - monster*/
<<widget "wolfPregnancy">>
<<if _args[0] and _args[1]>>
	<<pregnancyBabyBase _args[0] _args[1] _args[2]>>
	<<if _args[0] is "pc">>
		<<set $_pregnancy to $sexStats.vagina.pregnancy>>
		<<if !$player.vaginaExist or $_pregnancy.fetus.length>>
			<<set _prevent to true>>
		<</if>>
		<<set $_last_preg_pill to clone(_pills.lastTaken.pregnancy)>>
		<<if $_last_preg_pill is "fertility booster" or ($skin.pubic.type is "magic" and $skin.pubic.special is "pregnancy")>>
			<<set $_fertility to true>>
		<</if>>
	<<else>>
		<<set $_pregnancy to $NPCName[$NPCNameList.indexOf(_args[0])].pregnancy>>
		<<if !$NPCName[$NPCNameList.indexOf(_args[0])].vagina or !$_pregnancy.enabled or $_pregnancy.fetus.length>>
			<<set _prevent to true>>
		<</if>>
		<<if $_pregnancy.pills is "fertility">>
			<<set $_fertility to true>>
		<</if>>
	<</if>>
	<<if $_pregnancy isnot undefined and !_prevent>>
		<<set $_pregnancy.type to "wolf">>
		<<for $_i to 0; $_i lt 8; $_i++>>
			<<set $_baby to clone(_babyBase)>>
			<<set $_baby.type to "wolf">>
			<<if _args[3] is true>>
				<<set $_baby.features.monster to "monster">>
			<<else>>
				<<set $_baby.features.monster to 0>>
			<</if>>
			<<set $_baby.gender to (random(0,100) gte 50 ? "f" : "m")>>
			<<if $player.gender is "h" and ($_baby.mother is "pc" or $_baby.father is "pc") and random(0,100) gte 75>>
				<<set $_baby.gender to "h">>
			<</if>>
			<<set _furColour to ["gray", "brown", "tan", "white"]>>
			<<if $_baby.mother is "Black Wolf" or $_baby.father is "Black Wolf">>
				<<run _furColour.push("black")>>
				<<run _furColour.push("black")>>
			<</if>>
			<<set $_baby.features.hairColour to _furColour.pluck()>>
			<<bodyPregCalc>>
			<<set $_baby.features.size to _bodySize.pluck()>>
			<<run $_pregnancy.fetus.push(clone($_baby))>>
			<<if $_i gt 4 and random(0,100) gte 100 - ($_i * 3) && !$_fertility>>
				<<break>>
			<</if>>
		<</for>>
		<<set $_pregnancy.timer to random(70,110)>>
		<<set $_pregnancy.timerStart to clone($_pregnancy.timer)>>
		<<if _args[0] is "pc">>
			<<playerPregStatSetup>>
		<<else>>
			<<set $_pregnancy.potentialFathers to [_args[1]]>>
		<</if>>
		<<set $_pregnancy.awareOf to false>>
	<</if>>
<</if>>
<</widget>>
